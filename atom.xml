<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落墨</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://keysluomo.github.io/"/>
  <updated>2020-06-19T03:10:44.312Z</updated>
  <id>https://keysluomo.github.io/</id>
  
  <author>
    <name>落墨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop安装</title>
    <link href="https://keysluomo.github.io/2020/06/19/Hadoop%E5%AE%89%E8%A3%85/"/>
    <id>https://keysluomo.github.io/2020/06/19/Hadoop安装/</id>
    <published>2020-06-19T03:06:47.000Z</published>
    <updated>2020-06-19T03:10:44.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、单机（伪分布式）"><a href="#一、单机（伪分布式）" class="headerlink" title="一、单机（伪分布式）"></a>一、单机（伪分布式）</h1><h2 id="1-1、环境"><a href="#1-1、环境" class="headerlink" title="1.1、环境"></a>1.1、环境</h2><p>系统环境为Centos作为系统环境，这里不再叙述系统的安装<br>基于原生Hadoop 2 ，可以适合任何Hadoop 2.x.y版本，例如 Hadoop 2.7.1, Hadoop 2.4.1等。</p><h3 id="Hadoop运行环境搭建"><a href="#Hadoop运行环境搭建" class="headerlink" title="Hadoop运行环境搭建"></a>Hadoop运行环境搭建</h3><p>虚拟机网络模式设置为NAT<br><img src="https://uploadfiles.nowcoder.com/images/20190904/9094293_1567608344001_42757B180952AD1472AC869C06FD55B4" alt="图片说明" title="图片标题"> </p><h3 id="修改为静态ip"><a href="#修改为静态ip" class="headerlink" title="修改为静态ip"></a>修改为静态ip</h3><p>在终端命令窗口中输入</p><pre><code>[root@hadoop101 /]#vim /etc/udev/rules.d/70-persistent-net.rules </code></pre><p>进入如下页面，删除 eth0 该行；将 eth1 修改为 eth0，同时复制物理 ip 地址<br><img src="https://uploadfiles.nowcoder.com/images/20190904/9094293_1567608631305_27EA844EA176F7AF92263BE2A5B29165" alt="图片说明" title="图片标题"> </p><p>修改IP地址</p><pre><code>[root@hadoop101 /]# vim /etc/sysconfig/network-scripts/ifcfg-eth0 </code></pre><p>需要修改的内容有6项：<br>HWADDR=<br>IPADDR=<br>GATEWAY=<br>ONBOOT=yes<br>BOOTPROTO=static<br>DNS1=8.8.8.8<br>执行：</p><pre><code>[root@hadoop101 /]# service network restart </code></pre><p>如果报错，reboot，重启虚拟机。</p><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>修改 linux 的 hosts 文件<br>（1）进入Linux系统查看本机的主机名。通过 hostname 命令查看。 </p><pre><code>[root@hadoop100 /]# hostname hadoop100 </code></pre><p>（2）如果感觉此主机名不合适，我们可以进行修改。通过编辑/etc/sysconfig/network文件。</p><pre><code>[root@hadoop100~]# vi /etc/sysconfig/network 修改文件中主机名称 NETWORKING=yes NETWORKING_IPV6=no HOSTNAME= hadoop101 注意：主机名称不要有“_”下划线</code></pre><p>（3）打开此文件后，可以看到主机名。修改此主机名为我们想要修改的主机名<br>hadoop101<br>（4）保存退出。<br>（5）打开/etc/hosts<br>[root@hadoop100 ~]# vim /etc/hosts<br>添加如下内容<br>192.168.1.100 hadoop100<br>192.168.1.101 hadoop101<br>192.168.1.102 hadoop102<br>192.168.1.103 hadoop103<br>（6）并重启设备，重启后，查看主机名，已经修改成功<br>2）修改 window10 的 hosts 文件<br> （1）进入 C:\Windows\System32\drivers\etc 路径<br> （2）打开 hosts 文件并添加如下内容<br>192.168.1.100 hadoop100<br>192.168.1.101 hadoop101<br>192.168.1.102 hadoop102<br>192.168.1.103 hadoop103 </p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>1）查看防火墙开机启动状态<br>[root@hadoop101 ~]# chkconfig iptables –list<br>2）关闭防火墙<br>[root@hadoop101 ~]# chkconfig iptables off  </p><h3 id="在-opt-目录下创建文件"><a href="#在-opt-目录下创建文件" class="headerlink" title="在 opt 目录下创建文件"></a>在 opt 目录下创建文件</h3><p>1）创建 user 用户<br> 在 root 用户里面执行如下操作 </p><pre><code>[root@hadoop101 opt]# adduser user [root@hadoop101 opt]# passwd user 更改用户 test 的密码 。 新的 密码： 无效的密码： 它没有包含足够的不同字符 无效的密码： 是回文 重新输入新的 密码： passwd： 所有的身份验证令牌已经成功更新。 </code></pre><p>2）设置 user 用户具有 root 权限<br>修改 /etc/sudoers 文件，找到下面一行，在 root 下面添加一行，如下所示： </p><pre><code>[root@hadoop101 user]# vi /etc/sudoers ## Allow root to run any commands anywhere root    ALL=(ALL)     ALL user   ALL=(ALL)     ALL </code></pre><p>修改完毕，现在可以用 user 帐号登录，然后用命令 su - ，即可获得 root 权限进行<br>操作。<br>3）在/opt 目录下创建文件夹<br>（1）在 root 用户下创建 module、software 文件夹 </p><pre><code>[root@hadoop101 opt]# mkdir module [root@hadoop101 opt]# mkdir software </code></pre><p>（2）修改 module、software 文件夹的所有者</p><pre><code>[root@hadoop101 opt]# chown user:user module [root@hadoop101 opt]# chown user:user sofrware [root@hadoop101 opt]# ls -al 总用量 16 drwxr-xr-x.  6 root    root 4096 4 月  24 09:07 . dr-xr-xr-x. 23 root    root 4096 4 月  24 08:52 .. drwxr-xr-x.  4 user user 4096 4 月  23 16:26 module drwxr-xr-x.  2 user user 4096 4 月  23 16:25 software </code></pre><h3 id="安装-jdk"><a href="#安装-jdk" class="headerlink" title="安装 jdk"></a>安装 jdk</h3><p>1）卸载现有 jdk<br>（1）查询是否安装 java 软件： </p><pre><code>[root@hadoop101 opt]# rpm -qa|grep java </code></pre><p>（2）如果安装的版本低于 1.7，卸载该 jdk</p><pre><code>[root@hadoop101 opt]# rpm -e 软件包 </code></pre><p>2）用 SecureCRT 工具将 jdk、Hadoop-2.7.2.tar.gz 导入到 opt 目录下面的 software 文件夹下面<br>3）在 linux 系统下的 opt 目录中查看软件包是否导入成功</p><pre><code>[root@hadoop101 opt]# cd software/ [root@hadoop101 software]# ls hadoop-2.7.2.tar.gz  jdk-8u144-linux-x64.tar.gz </code></pre><p>4）解压 jdk 到/opt/module 目录下 </p><pre><code>[root@hadoop101 software]# tar -zxvf jdk-8u144-linux-x64.tar.gz -C /opt/module/ </code></pre><p>5）配置 jdk 环境变量<br>（1）先获取 jdk 路径： </p><pre><code>[root@hadoop101 jdk1.8.0_144]# pwd /opt/module/jdk1.8.0_144 </code></pre><p>（2）打开/etc/profile 文件：</p><pre><code>[root@hadoop101 jdk1.8.0_144]# vi /etc/profile </code></pre><p>在 profie 文件末尾添加 jdk 路径： </p><pre><code>##JAVA_HOME export JAVA_HOME=/opt/module/jdk1.8.0_144 export PATH=$PATH:$JAVA_HOME/bin </code></pre><p>（3）保存后退出：<br>:wq<br> （4）让修改后的文件生效： </p><pre><code>[root@hadoop101 jdk1.8.0_144]# source /etc/profile </code></pre><p>（5）重启（如果 java -version 可以用就不用重启）：  </p><pre><code>代码块</code></pre><p>6）测试 jdk 安装成功 </p><pre><code>[root@hadoop101 jdk1.8.0_144]# java -version java version &quot;1.8.0_144&quot; </code></pre><h1 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h1><p>1）进入到 Hadoop 安装包路径下：</p><pre><code>[root@hadoop101 ~]# cd /opt/software/ </code></pre><p> 2）解压安装文件到/opt/module 下面 </p><pre><code>[root@hadoop101 software]# tar -zxf hadoop-2.7.2.tar.gz -C /opt/module/ </code></pre><p>3）查看是否解压成功 </p><pre><code>[root@hadoop101 software]# ls /opt/module/ hadoop-2.7.2 </code></pre><p>4）在/opt/module/hadoop-2.7.2/etc/hadoop 路径下配置 hadoop-env.sh<br>（1）Linux 系统中获取 jdk 的安装路径： </p><pre><code>[root@hadoop101 jdk1.8.0_144]# echo $JAVA_HOME /opt/module/jdk1.8.0_144 </code></pre><p>（2）修改 hadoop-env.sh 文件中 JAVA_HOME 路径： </p><pre><code>[root@hadoop101 hadoop]# vi hadoop-env.sh </code></pre><p>修改 JAVA_HOME 如下 :</p><pre><code>export JAVA_HOME=/opt/module/jdk1.8.0_144 </code></pre><p>5）将 hadoop 添加到环境变量<br> （1）获取 hadoop 安装路径：<br>[root@ hadoop101 hadoop-2.7.2]# pwd<br>/opt/module/hadoop-2.7.2<br> （2）打开/etc/profile 文件：<br>[root@ hadoop101 hadoop-2.7.2]# vi /etc/profile<br>  在 profie 文件末尾添加 jdk 路径：（shitf+g） </p><p>##HADOOP_HOME<br>export HADOOP_HOME=/opt/module/hadoop-2.7.2<br>export PATH=$PATH:$HADOOP_HOME/bin<br>export PATH=$PATH:$HADOOP_HOME/sbin<br>（3）保存后退出：<br>:wq<br> （4）让修改后的文件生效： </p><pre><code>[root@ hadoop101 hadoop-2.7.2]# source /etc/profile </code></pre><p>（5）重启(如果 hadoop 命令不能用再重启)：  </p><pre><code>[root@ hadoop101 hadoop-2.7.2]# sync [root@ hadoop101 hadoop-2.7.2]# reboot </code></pre><p>6）修改/opt 目录下的所有文件所有者为 user</p><pre><code>[root@hadoop101 opt]# chown user:user -R /opt/ </code></pre><p>7）切换到 user 用户 </p><pre><code>[root@hadoop101 opt]# su user</code></pre>]]></content>
    
    <summary type="html">
    
      Hadoop运行环境搭建
    
    </summary>
    
      <category term="Hadoop生态圈" scheme="https://keysluomo.github.io/categories/Hadoop%E7%94%9F%E6%80%81%E5%9C%88/"/>
    
    
      <category term="Hadoop部署" scheme="https://keysluomo.github.io/tags/Hadoop%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>VMwareWorkstation pro无法在Windows上运行的问题</title>
    <link href="https://keysluomo.github.io/2020/06/19/VMwareWorkstation-pro%E6%97%A0%E6%B3%95%E5%9C%A8Windows%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://keysluomo.github.io/2020/06/19/VMwareWorkstation-pro无法在Windows上运行的问题/</id>
    <published>2020-06-19T03:03:57.000Z</published>
    <updated>2020-06-19T03:08:07.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于Windows系统更新问题，导致电脑上的VMwareWorkstation pro无法使用，之前有卸过Windows组件，但是系统自动更新之后又不能打开，所有只能乖乖地将我的VMwareWorkstation更新到15版本。</p><h3 id="首先根据系统的提示将最新的版本下载至我们的电脑中"><a href="#首先根据系统的提示将最新的版本下载至我们的电脑中" class="headerlink" title="首先根据系统的提示将最新的版本下载至我们的电脑中"></a>首先根据系统的提示将最新的版本下载至我们的电脑中</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574346785409_9EC31C859791FA60A0B7E71579D0C654 &quot;图片标题&quot;" alt="图片说明"> </p><h3 id="由于我的电脑是Windows系统所以选择Windows版本"><a href="#由于我的电脑是Windows系统所以选择Windows版本" class="headerlink" title="由于我的电脑是Windows系统所以选择Windows版本"></a>由于我的电脑是Windows系统所以选择Windows版本</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574346847609_DA70CBCD7AD4B946B7365039BC29BFD7 &quot;图片标题&quot;" alt="图片说明"> </p><h3 id="当我们打开运行安装时发现"><a href="#当我们打开运行安装时发现" class="headerlink" title="当我们打开运行安装时发现"></a>当我们打开运行安装时发现</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574347032331_F859EB3FB4F8A922609E67F57A37371F &quot;图片标题&quot;" alt="图片说明"> </p><h3 id="于是我抱着可能丢失文件的风险将我的老版本VMwareWorkstation卸载"><a href="#于是我抱着可能丢失文件的风险将我的老版本VMwareWorkstation卸载" class="headerlink" title="于是我抱着可能丢失文件的风险将我的老版本VMwareWorkstation卸载"></a>于是我抱着可能丢失文件的风险将我的老版本VMwareWorkstation卸载</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574347251240_797ED7146705E26B7B9F9C12A1E9A496 &quot;图片标题&quot;" alt="图片说明"> </p><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574347273713_7968EA3E3DCFC499AD0ED3E24F32B170 &quot;图片标题&quot;" alt="图片说明"> </p><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574347290649_FE803758324EDCBB7D8E589762A57C3A &quot;图片标题&quot;" alt="图片说明"> </p><p><img src="https://uploadfiles.nowcoder.com/images/20191121/9094293_1574347695181_8C8DD40CC713849D9B6E476B54939DF4 &quot;图片标题&quot;" alt="图片说明"> </p><h2 id="最后升级到我们的VMwareWorkstation-pro版本即可，大功告成-虚拟机又能打开了。（不过界面…）"><a href="#最后升级到我们的VMwareWorkstation-pro版本即可，大功告成-虚拟机又能打开了。（不过界面…）" class="headerlink" title="最后升级到我们的VMwareWorkstation pro版本即可，大功告成! 虚拟机又能打开了。（不过界面…）"></a>最后升级到我们的VMwareWorkstation pro版本即可，大功告成! 虚拟机又能打开了。（不过界面…）</h2><p><img src="https://uploadfiles.nowcoder.com/images/20191123/9094293_1574518355715_11192995B1C6313E1EAD080F640095D1 &quot;图片标题&quot;" alt="图片说明"> </p>]]></content>
    
    <summary type="html">
    
      VMwareWorkstation无法使用问题
    
    </summary>
    
      <category term="Tools" scheme="https://keysluomo.github.io/categories/Tools/"/>
    
    
      <category term="VMware" scheme="https://keysluomo.github.io/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Scala</title>
    <link href="https://keysluomo.github.io/2020/06/19/Scala/"/>
    <id>https://keysluomo.github.io/2020/06/19/Scala/</id>
    <published>2020-06-19T03:00:31.000Z</published>
    <updated>2020-06-19T03:02:02.565Z</updated>
    
    <content type="html"><![CDATA[<p>Scala 是 Scalable Language 的简写，是一门多范式的编程语言<br>联邦理工学院洛桑（EPFL）的Martin Odersky于2001年基于Funnel的工作开始设计Scala。<br>Funnel是把函数式编程思想和Petri网相结合的一种编程语言。<br>Odersky先前的工作是Generic Java和javac（Sun Java编译器）。Java平台的Scala于2003年底/2004年初发布。.NET平台的Scala发布于2004年6月。该语言第二个版本，v2.0，发布于2006年3月。<br>截至2009年9月，最新版本是版本2.7.6 。Scala 2.8预计的特性包括重写的Scala类库（Scala collections library）、方法的命名参数和默认参数、包对象（package object），以及Continuation。<br>2009年4月，Twitter宣布他们已经把大部分后端程序从Ruby迁移到Scala，其余部分也打算要迁移。此外， Wattzon已经公开宣称，其整个平台都已经是基于Scala基础设施编写的。</p><h1 id="Scala特性："><a href="#Scala特性：" class="headerlink" title="Scala特性："></a>Scala特性：</h1><p><strong>面向对象特性：</strong><br>Scala是一种纯面向对象的语言，每个值都是对象。对象的数据类型以及行为由类和特质描述。类抽象机制的扩展有两种途径：一种途径是子类继承，另一种途径是灵活混入机制。这两种途径能避免多重继承的种种问题。<br><strong>函数式编程：</strong><br>Scala也是一种函数式语言，奇函数也能成值来使用。Scala提供了轻量级的语法用以定义匿名函数，支持高级函数，允许嵌套多层函数，并支持柯里化。Scala的case class及内置的模式匹配相当于函数式编程语言中常用的代数类型。<br>更进一步，程序员可以利用Scala的模式匹配，编写类似正则表达式的代码处理XML数据<br>静态类型<br>Scala具备类型系统，通过编译时检查，保证代码的安全性和一致性。<br>类型系统具体支持一下特性：<br>泛型类<br>协变和逆变<br>标注<br>类型参数的上下限约束<br>把类别和抽象类型作为对象成员<br><strong>复合类型</strong><br>引用自己时显示指定类型<br>视图<br>多态方法<br><strong>扩展性：</strong><br>Scala的设计秉承一项事实，即在实践中，某个领域特定的应用程序开发往往需要特定于该领域的语言扩展。Scala提供了许多独特的语言机制，可以以库的形式轻易无缝添加新的语言结构：<br>任何方法可用作前缀或后缀操作符<br>可以根据预期类型自动构造闭包。<br><strong>并发性：</strong><br>Scala使用Actor作为其并发模型，Actor是类似线程的实体，通过邮箱发收消息。Actor可以复用线程，因此可以在程序中可以使用数百万个Actor，而线程只能创建数千个。在2.10之后的版本中，使用AKKa作为其默认Actor实现。</p>]]></content>
    
    <summary type="html">
    
      预览描述
    
    </summary>
    
      <category term="Scala" scheme="https://keysluomo.github.io/categories/Scala/"/>
    
    
      <category term="编程语言" scheme="https://keysluomo.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>垃圾收集器</title>
    <link href="https://keysluomo.github.io/2020/06/17/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>https://keysluomo.github.io/2020/06/17/垃圾收集器/</id>
    <published>2020-06-17T10:51:43.000Z</published>
    <updated>2020-06-17T10:53:52.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果说收集算法是内存回收的方法论，那么垃圾收集就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。这里讨论的收集器基于JDK1.7Update14之后的HotSpot虚拟机。</p><h2 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h2><p>Serial收集器是最基本、发展历史最悠久的收集器，曾经是虚拟机新生代收集的唯一选择。我们从名字就可知道，这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。<br>如图示意了Serial、Serial Old收集器的运行过程。<br><img src="https://uploadfiles.nowcoder.com/images/20191112/9094293_1573563026701_55FE04FFAFD803A09D03B580CA415161 &quot;图片标题&quot;" alt="图片说明"> </p><h2 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h2><p>ParNew收集器其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数（例如：-XX：SurvivorRatio、——XX：PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。<br>ParNew/Serial Old示意图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20191112/9094293_1573563445447_F6D1DDBD9F7ECB1CFEACF37CD44AAFC8 &quot;图片标题&quot;" alt="ParNew/Serial Old示意图"> </p><h2 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h2><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器，看上去和ParNew都一样，那他有什么特别之处呢?<br>Parallen Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能的缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标是达到一个可控制的吞吐量。所谓吞吐量<br>就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间），虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。<br>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度就能提升用户体验，而高吞吐量则可以高效率的利用CPU时间，尽快完成程序的运算任务，主要是和在后台运算而不需要太多交互的任务。</p><h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用“标记-整理”算法。这个收集器的主要意义也是在于给Client模式下的虚拟机使用。如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备预案，在并发手机发生Concurrent Mode Failure时使用。<br>如图是Serial、Serial Old收集器的运行过程。</p><p><img src="https://uploadfiles.nowcoder.com/images/20191112/9094293_1573563026701_55FE04FFAFD803A09D03B580CA415161 &quot;图片标题&quot;" alt="图片说明"></p><h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器是在JDk1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择。由于老年代Serial Old收集器在服务端应用性能上的拖累，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew和CMS的组合给力。<br>Parallel Old收集器的工作过程如图：</p><p><img src="https://uploadfiles.nowcoder.com/images/20191112/9094293_1573564061197_FA5080FFCFF52BF8E2DA019D00ED27EB &quot;图片标题&quot;" alt="图片说明"> </p><h2 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h2><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常复合这类应用的需求。<br>从名字可以看出，CMS收集器是基于“标记清除”算法实现的，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤，<br>包括：</p><ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除<br>其中，初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能<br>直接关联到的对象，速度很快，并发标记阶段就是进行GC RootsTracing的过程，而重新标记阶段则是为了修正并<br>发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初<br>始标记阶段稍长一些，但远比并发标记的时间短。<br><img src="https://uploadfiles.nowcoder.com/images/20191112/9094293_1573564770931_7FEC100C446310B8080EDA25BD0AC646 &quot;图片标题&quot;" alt="图片说明"> <h2 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h2>G1（Garbage-First）收集器是当今收集器技术发展的最前沿成果之一。G1是一款面向服务端应用的垃圾收集器。HotSpot开发团队赋予它的使命是（在比较长期的）未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。</li><li>并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li><li>分代收集：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更<br>好的收集效果。</li><li>空间整合：与CMS的“标记—清理”算法不同，G1从整体来看是基于“标记—整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生<br>内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li><li>可预测的停顿：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。<br>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合如果不计算维护Remembered Set的操作，G1收集器的运作大致可划分为以下几个步骤：</li><li>初始标记（Initial Marking）</li><li>并发标记（Concurrent Marking）</li><li>最终标记（Final Marking）</li><li>筛选回收（Live Data Counting and Evacuation）<br><img src="https://uploadfiles.nowcoder.com/images/20191112/9094293_1573564943195_485886224376A4217C43402415E84EF6 &quot;图片标题&quot;" alt="图片说明"> </li></ul>]]></content>
    
    <summary type="html">
    
      如果说收集算法是内存回收的方法论，那么垃圾收集就是内存回收的具体实现。Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。这里讨论的收集器基于JDK1.7Update14之后的HotSpot虚拟机。
    
    </summary>
    
      <category term="JVM" scheme="https://keysluomo.github.io/categories/JVM/"/>
    
    
      <category term="垃圾收集器" scheme="https://keysluomo.github.io/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HDFS NameNode的工作机制</title>
    <link href="https://keysluomo.github.io/2020/06/17/HDFS-NameNode%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
    <id>https://keysluomo.github.io/2020/06/17/HDFS-NameNode的工作机制/</id>
    <published>2020-06-17T10:47:21.000Z</published>
    <updated>2020-06-17T10:49:18.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h2><p><img src="https://uploadfiles.nowcoder.com/images/20191204/9094293_1575472497353_3141B75B10B6FA1DE399005016B78FB6 &quot;图片标题&quot;" alt=" "> </p><h3 id="1-第一阶段：-namenode-启动"><a href="#1-第一阶段：-namenode-启动" class="headerlink" title="1 第一阶段： namenode 启动"></a>1 第一阶段： namenode 启动</h3><p>1）第一次启动 namenode 格式化后， 创建 fsimage 和 edits 文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。<br>2） 客户端对元数据进行增删改的请求。<br>3） namenode 记录操作日志，更新滚动日志。<br>4） namenode 在内存中对数据进行增删改查。</p><h3 id="2-第二阶段：-Secondary-NameNode-工作"><a href="#2-第二阶段：-Secondary-NameNode-工作" class="headerlink" title="2 第二阶段： Secondary NameNode 工作"></a>2 第二阶段： Secondary NameNode 工作</h3><p>1） Secondary NameNode 询问 namenode 是否需要 checkpoint。 直接带回 namenode 是否检查结果。<br>2） Secondary NameNode 请求执行 checkpoint。<br>3） namenode 滚动正在写的 edits 日志。<br>4）将滚动前的编辑日志和镜像文件拷贝到 Secondary NameNode。<br>5） Secondary NameNode 加载编辑日志和镜像文件到内存，并合并。<br>6） 生成新的镜像文件 fsimage.chkpoint。<br>7） 拷贝 fsimage.chkpoint 到 namenode。<br>8） namenode 将 fsimage.chkpoint 重新命名成 fsimage。</p>]]></content>
    
    <summary type="html">
    
      NameNode的工作机制
    
    </summary>
    
      <category term="Hadoop" scheme="https://keysluomo.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://keysluomo.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>HDFS(1.0)与(2.0)</title>
    <link href="https://keysluomo.github.io/2020/06/17/HDFS-1-0-%E4%B8%8E-2-0/"/>
    <id>https://keysluomo.github.io/2020/06/17/HDFS-1-0-与-2-0/</id>
    <published>2020-06-17T10:44:41.000Z</published>
    <updated>2020-06-17T10:46:18.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当数据集超过一个单独的物理计算机的存储能力时，便有必要将它分部到多个独立的计算机。管理跨计算机网络存储的文件系统成为分布式文件系统。因为它们是基于网络的，所有网络编程的复杂性都会随之而来，所以分布式文件系统比普通磁盘文件系统更复杂。使这个文件系统能容忍节点故障而不损失数据就是一个极大的挑战。</p><h2 id="HDFS的设计"><a href="#HDFS的设计" class="headerlink" title="HDFS的设计"></a>HDFS的设计</h2><p>HDFS是为以流式出局访问模式存储超大文件而设计的文件系统，在商用硬件的集群上运行。让我们看看它的优势：<br><strong>超大文件</strong><br>“超大文件”在这里指几百MB，几百GB甚至几百TB大小的文件。目前已经有Hadoop集群存储PB级的数据了。<br><strong>流式数据</strong><br>HDFS建立在这样一个思想上：一次写入、多次读取模式是最高效的。一个数据集通常由数据源生成或复制，接着在此基础上进行各种各样的分析。每个分析至少都会涉及数据集中的大部分数据（甚至全部）。<br><strong>商用硬件</strong><br>Hadoop不需要运行在昂贵并且高可靠的硬件上。它被设计运行在商用硬件（在各种零售店都能买到的普通硬件）的集群上，因此至少对于大的集群来说，节点故障的几率还是较高的。HDFS在面对这种故障时，被设计为能够继续运行而让用户察觉不到明显的中断。</p><h2 id="HDFS-1-0架构："><a href="#HDFS-1-0架构：" class="headerlink" title="HDFS 1.0架构："></a>HDFS 1.0架构：</h2><p> HDFS采用的是Master/Slave架构一个 HDFS 集群包含一个单独的 NameNode 和多个 DataNode 节点。</p><h2 id="HDFS-1-0-的问题"><a href="#HDFS-1-0-的问题" class="headerlink" title="HDFS 1.0 的问题"></a>HDFS 1.0 的问题</h2><p>进入了 PB 级的大数据时代，HDFS 1.0的设计缺陷已经无法满足生产的需求，最致命的问题有以下两点：</p><ul><li>NameNode 的单点问题，如果 NameNode 挂掉了，数据读写都会受到影响，HDFS 整体将变得不可用，这在生产环境中是不可接受的；</li><li>水平扩展问题，随着集群规模的扩大，1.0 时集群规模达到3000时，会导致整个集群管理的文件数目达到上限（因为 NameNode 要管理整个集群 block 元信息、数据目录信息等）。  </li></ul><p>为了解决上面的两个问题，Hadoop2.0 提供一套统一的解决方案：</p><ul><li>HA（High Availability 高可用方案）：这个是为了解决 NameNode 单点问题；</li><li>NameNode Federation：是用来解决 HDFS 集群的线性扩展能力。  </li></ul><h2 id="HDFS-2-0-的-HA-实现"><a href="#HDFS-2-0-的-HA-实现" class="headerlink" title="HDFS 2.0 的 HA 实现"></a>HDFS 2.0 的 HA 实现</h2><p>这里先看下 HDFS 高可用解决方案的架构设计，如下图</p><p><img src="https://uploadfiles.nowcoder.com/images/20191113/9094293_1573653745515_C6385AA30EAE8DF42909F448F818796D &quot;图片标题&quot;" alt="图片说明"> </p><p>这里与前面 1.0 的架构已经有很大变化，简单介绍一下的组件：</p><ol><li>Active NameNode 和 Standby NameNode：两台 NameNode 形成互备，一台处于 Active 状态，为主 NameNode，另外一台处于 Standby 状态，为备 NameNode，只有主 NameNode 才能对外提供读写服务；</li><li>ZKFailoverController（主备切换控制器，FC）：ZKFailoverController 作为独立的进程运行，对 NameNode 的主备切换进行总体控。ZKFailoverController 能及时检测到 NameNode 的健康状况，在主 NameNode 故障时借助 Zookeeper 实现自动的主备选举和切换（当然 NameNode 目前也支持不依赖于Zookeeper 的手动主备切换）；</li><li>Zookeeper 集群：为主备切换控制器提供主备选举支持；</li><li>共享存储系统：共享存储系统是实现 NameNode 的高可用最为关键的部分，共享存储系统保存了 NameNode 在运行过程中所产生的 HDFS 的元数据。主 NameNode 和备NameNode 通过共享存储系统实现元数据同步。在进行主备切换的时候，新的主 NameNode 在确认元数据完全同步之后才能继续对外提供服务。</li><li>DataNode 节点：因为主 NameNode 和备 NameNode 需要共享 HDFS 的数据块和 DataNode 之间的映射关系，为了使故障切换能够快速进行，DataNode 会同时向主 NameNode 和备 NameNode 上报数据块的位置信息。</li></ol><h2 id="HDFS-2-0-Federation-实现"><a href="#HDFS-2-0-Federation-实现" class="headerlink" title="HDFS 2.0 Federation 实现"></a>HDFS 2.0 Federation 实现</h2><p>在 1.0 中，HDFS 的架构设计有以下缺点：</p><p>namespace 扩展性差：在单一的 NN 情况下，因为所有 namespace 数据都需要加载到内存，所以物理机内存的大小限制了整个 HDFS 能够容纳文件的最大个数（namespace 指的是 HDFS 中树形目录和文件结构以及文件对应的 block 信息）；<br>性能可扩展性差：由于所有请求都需要经过 NN，单一 NN 导致所有请求都由一台机器进行处理，很容易达到单台机器的吞吐；<br>隔离性差：多租户的情况下，单一 NN 的架构无法在租户间进行隔离，会造成不可避免的相互影响。<br>而 Federation 的设计就是为了解决这些问题，采用 Federation 的最主要原因是设计实现简单，而且还能解决问题。</p><h2 id="Federation-架构"><a href="#Federation-架构" class="headerlink" title="Federation 架构"></a>Federation 架构</h2><p>Federation 的架构设计如下图所示（图片来自 HDFS Federation）：<br><img src="https://uploadfiles.nowcoder.com/images/20191113/9094293_1573657152422_869474068105B25BFF5141288796FA00 &quot;图片标题&quot;" alt="图片说明"> </p><h3 id="HDFS-Federation-架构实现"><a href="#HDFS-Federation-架构实现" class="headerlink" title="HDFS Federation 架构实现"></a>HDFS Federation 架构实现</h3><p>Federation 的核心设计思想<br>Federation 的核心思想是将一个大的 namespace 划分多个子 namespace，并且每个 namespace 分别由单独的 NameNode 负责，这些 NameNode 之间互相独立，不会影响，不需要做任何协调工作（其实跟拆集群有一些相似），集群的所有 DataNode 会被多个 NameNode 共享。</p><p>其中，每个子 namespace 和 DataNode 之间会由数据块管理层作为中介建立映射关系，数据块管理层由若干数据块池（Pool）构成，每个数据块只会唯一属于某个固定的数据块池，而一个子 namespace 可以对应多个数据块池。每个 DataNode 需要向集群中所有的 NameNode 注册，且周期性地向所有 NameNode 发送心跳和块报告，并执行来自所有 NameNode 的命令。</p><ol><li>一个 block pool 由属于同一个 namespace 的数据块组成，每个 DataNode 可能会存储集群中所有 block pool 的数据块；</li><li>每个 block pool 内部自治，也就是说各自管理各自的 block，不会与其他 block pool 交流，如果一个 NameNode 挂掉了，不会影响其他 NameNode;</li><li>某个 NameNode 上的 namespace 和它对应的 block pool 一起被称为 namespace volume，它是管理的基本单位。当一个 NameNode/namespace 被删除后，其所有 DataNode 上对应的 block pool 也会被删除，当集群升级时，每个 namespace volume 可以作为一个基本单元进行升级。<br>参考链接：<br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/</a><br><a href="http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/Federation.html" target="_blank" rel="noopener">http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/Federation.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      当数据集超过一个单独的物理计算机的存储能力时，便有必要将它分部到多个独立的计算机。管理跨计算机网络存储的文件系统成为分布式文件系统。因为它们是基于网络的，所有网络编程的复杂性都会随之而来，所以分布式文件系统比普通磁盘文件系统更复杂。使这个文件系统能容忍节点故障而不损失数据就是一个极大的挑战。
    
    </summary>
    
      <category term="Hadoop" scheme="https://keysluomo.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://keysluomo.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Flume监控之Ganglia</title>
    <link href="https://keysluomo.github.io/2020/06/17/Flume%E7%9B%91%E6%8E%A7%E4%B9%8BGanglia/"/>
    <id>https://keysluomo.github.io/2020/06/17/Flume监控之Ganglia/</id>
    <published>2020-06-17T10:39:22.000Z</published>
    <updated>2020-06-17T10:40:50.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&lt;blockquote&gt;<br>Ganglia是UC Berkeley发起的一个开源集群监视项目，设计用于测量数以千计的节点。Ganglia的核心包含gmond、gmetad以及一个Web前端。主要是用来监控系统性能，如：cpu 、mem、硬盘利用率， I/O负载、网络流量情况等，通过曲线很容易见到每个节点的工作状态，对合理调整、分配系统资源，提高系统整体性能起到重要作用。今天我们来看看如何用Ganglia来监控我们的flume集群数据。<br>&lt;/blockquote&gt;</p><h1 id="Ganglia的安装与部署"><a href="#Ganglia的安装与部署" class="headerlink" title="Ganglia的安装与部署"></a>Ganglia的安装与部署</h1><h2 id="1-安装httpd服务与php"><a href="#1-安装httpd服务与php" class="headerlink" title="1.安装httpd服务与php"></a>1.安装httpd服务与php</h2><pre><code>[root@bigdata107 flume]# sudo yum -y install httpd php</code></pre><h2 id="2-安装其他依赖"><a href="#2-安装其他依赖" class="headerlink" title="2.安装其他依赖"></a>2.安装其他依赖</h2><pre><code>[root@bigdata107 flume]# sudo yum -y install rrdtool perl-rrdtool rrdtool-devel[root@bigdata107 flume]# sudo yum -y install apr-devel </code></pre><p>##3.安装ganglia</p><pre><code>[root@bigdata107 flume]# rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm[root@bigdata107 flume]# yum -y install ganglia-gmetad[root@bigdata107 flume]# yum -y install ganglia-web[root@bigdata107 flume]# yum install -y ganglia-gmond</code></pre><h2 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h2><pre><code>[root@bigdata107 flume]# vim /etc/httpd/conf.d/ganglia.conf</code></pre><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586182698451_54B043E608B5CEFA3BEABAAA76A297DD &quot;图片标题&quot;" alt="图片说明"> </p><pre><code>[root@bigdata107 flume]# vim /etc/ganglia/gmetad.conf</code></pre><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586182806151_B9DF49E99A6A6E6FBEC8E68B262E2535 &quot;图片标题&quot;" alt="图片说明"> </p><pre><code>[root@bigdata107 flume]# vim /etc/ganglia/gmond.conf</code></pre><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586182861540_7CFA504945AED9BA125B9EAF62A2E8C1 &quot;图片标题&quot;" alt="图片说明"> </p><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586182933318_007860250407A7F699957C0BCE7AD90F &quot;图片标题&quot;" alt="图片说明"> </p><pre><code>[root@bigdata107 flume]#  vim /etc/selinux/config</code></pre><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586182992342_C08995949E2C1C62B523784107DF362C &quot;图片标题&quot;" alt="图片说明"> </p><h2 id="5-selinux本次生效关闭必须重启-如果此时不想重启-可以临时生效"><a href="#5-selinux本次生效关闭必须重启-如果此时不想重启-可以临时生效" class="headerlink" title="5.selinux本次生效关闭必须重启,如果此时不想重启,可以临时生效"></a>5.selinux本次生效关闭必须重启,如果此时不想重启,可以临时生效</h2><pre><code>[root@bigdata107 flume]#  sudo setenforce 0</code></pre><h1 id="启动Ganglia"><a href="#启动Ganglia" class="headerlink" title="启动Ganglia"></a>启动Ganglia</h1><pre><code>[root@bigdata107 flume]# service httpd start正在启动 httpd：[root@bigdata107 flume]# service gmetad startStarting GANGLIA gmetad:  [确定][root@bigdata107 flume]# service gmond startStarting GANGLIA gmond:  [确定]</code></pre><h2 id="1-打开web-UI"><a href="#1-打开web-UI" class="headerlink" title="1.打开web UI"></a>1.打开web UI</h2><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586183489794_90CF7CF84BC2F02B381395E788655501 &quot;图片标题&quot;" alt=" "> </p><h2 id="2-通过Ganglia监控Flume"><a href="#2-通过Ganglia监控Flume" class="headerlink" title="2.通过Ganglia监控Flume"></a>2.通过Ganglia监控Flume</h2><pre><code>[root@bigdata107 flume]# vim flume-env.sh</code></pre><p>添加如下内容：<br>export JAVA_OPTS=&quot;-Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts=192.168.216.107:8649 -Xms100m -Xmx200m&quot;</p><h2 id="3-启动flume任务"><a href="#3-启动flume任务" class="headerlink" title="3.启动flume任务"></a>3.启动flume任务</h2><pre><code>[root@bigdata107 flume]# bin/flume-ng agent --conf conf/ --name agent1 --conf-file job/flume_telnet_logger.conf -Dflume.root.logger==INFO,console -Dflume.monitoring.type=ganglia -Dflume.monitoring.hosts=192.168.216.107:8649</code></pre><h2 id="4-发送数据查看Ganglia监测图"><a href="#4-发送数据查看Ganglia监测图" class="headerlink" title="4.发送数据查看Ganglia监测图"></a>4.发送数据查看Ganglia监测图</h2><pre><code>[root@bigdata107 flume]# telnet bigdata107 44444</code></pre><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586183804208_514336376671171EC30255912BCF2C81 &quot;图片标题&quot;" alt="图片说明"></p><p><img src="https://uploadfiles.nowcoder.com/images/20200406/9094293_1586183911708_0A820C34898B48841ABF621389BC5E04 &quot;图片标题&quot;" alt="图片说明"> </p>]]></content>
    
    <summary type="html">
    
      Ganglia是UC Berkeley发起的一个开源集群监视项目，设计用于测量数以千计的节点。Ganglia的核心包含gmond、gmetad以及一个Web前端。主要是用来监控系统性能，如：cpu 、mem、硬盘利用率， I/O负载、网络流量情况等，通过曲线很容易见到每个节点的工作状态，对合理调整、分配系统资源，提高系统整体性能起到重要作用。今天我们来看看如何用Ganglia来监控我们的flume集群数据。
    
    </summary>
    
      <category term="Flume" scheme="https://keysluomo.github.io/categories/Flume/"/>
    
    
      <category term="集群监控" scheme="https://keysluomo.github.io/tags/%E9%9B%86%E7%BE%A4%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper分布式集群部署</title>
    <link href="https://keysluomo.github.io/2020/06/17/Zookeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>https://keysluomo.github.io/2020/06/17/Zookeeper分布式集群部署/</id>
    <published>2020-06-17T10:32:08.000Z</published>
    <updated>2020-06-17T10:34:53.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&lt;blockquote&gt;<br>ZooKeeper是一个开放源代码的分布式协调服务，由知名互联网公司雅虎创建，是Google Chubby的开源实现。ZooKeeper的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。  </p><p>ZooKeeper是一个典型的分布式数据一致性的解决方案，分布式应用程序可以基于它实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。ZooKeeper可以保证如下分布式一致性特性。<br>今天我们来看看如何分布式安装</p><p>&lt;/blockquote&gt;  </p><h1 id="Zookeeper分布式集群部署"><a href="#Zookeeper分布式集群部署" class="headerlink" title="Zookeeper分布式集群部署"></a>Zookeeper分布式集群部署</h1><h2 id="下载Zookeeper"><a href="#下载Zookeeper" class="headerlink" title="下载Zookeeper"></a>下载Zookeeper</h2><p>这里可以参考官网，下载需要的版本：<br><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p><h2 id="解压Zookeeper到我们指定的目录"><a href="#解压Zookeeper到我们指定的目录" class="headerlink" title="解压Zookeeper到我们指定的目录"></a>解压Zookeeper到我们指定的目录</h2><pre><code>[root@bigdata107 software]#  tar -zxvf zookeeper-3.4.10 -C /opt/module/</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p><strong>1.修改zoo_sample.cfg zoo.cfg 为zoo.cfg</strong></p><pre><code>[root@bigdata107 software]#  mv zoo_sample.cfg zoo.cfg zoo.cfg</code></pre><p><strong>2.修改配置文件</strong></p><pre><code>[root@bigdata107 software]# vi zoo.cfg</code></pre><p>&lt;blockquote&gt;</p><p>#数据目录需要提前创建  </p><p>dataDir=/opt/module/zookeeper-3.4.5-cdh5.10.0/zkData  </p><p>#server.每个节点服务编号=服务器ip地址：集群通信端口：选举端口<br>server.1=bigdata107 :2888:3888<br>server.2=bigdata108 :2888:3888<br>server.3=bigdata109 :2888:3888<br>&lt;/blockquote&gt;  </p><p><strong>3.分发到各个节点</strong>  </p><pre><code>[root@bigdata107 software]#   scp -r zookeeper-3.4.10/ bigdata108:/opt/module/[root@bigdata107 software]#  scp -r zookeeper-3.4.10/ bigdata109:/opt/module/</code></pre><p><strong>4.创建相关目录</strong></p><pre><code>[root@bigdata107 zookeeper-3.4.10]# mkdir zkData</code></pre><p><strong>5.在各个节点zkData目录下，创建myid</strong></p><pre><code>#bigdata107 节点[root@bigdata107 zookeeper-3.4.10]# touch myid[root@bigdata107 zookeeper-3.4.10]# vi myid1#bigdata108 节点[root@bigdata108 zookeeper-3.4.10]# touch myid[root@bigdata108 zookeeper-3.4.10]# vi myid2#bigdata109 节点[root@bigdata109 zookeeper-3.4.10]# touch myid[root@bigdata109 zookeeper-3.4.10]# vi myid3</code></pre><p><strong>6.启动Zookeeper服务</strong></p><pre><code>#启动Zookeeper服务[root@bigdata107 zookeeper-3.4.10]# bin/zkServer.sh start#查看各个节点服务状态 [root@bigdata107 zookeeper-3.4.10]# bin/zkServer.sh status#关闭各个节点服务[root@bigdata107 zookeeper-3.4.10]# bin/zkServer.sh stop</code></pre>]]></content>
    
    <summary type="html">
    
      ZooKeeper是一个开放源代码的分布式协调服务，由知名互联网公司雅虎创建，是Google Chubby的开源实现。ZooKeeper的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。
    
    </summary>
    
      <category term="Zookeeper" scheme="https://keysluomo.github.io/categories/Zookeeper/"/>
    
    
      <category term="集群部署" scheme="https://keysluomo.github.io/tags/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>JConsole:Java监视与管理控制台</title>
    <link href="https://keysluomo.github.io/2020/06/17/JConsole-Java%E7%9B%91%E8%A7%86%E4%B8%8E%E7%AE%A1%E7%90%86%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    <id>https://keysluomo.github.io/2020/06/17/JConsole-Java监视与管理控制台/</id>
    <published>2020-06-16T16:45:19.000Z</published>
    <updated>2020-06-16T16:46:24.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JConsole（Java Monitoring and Management Console）是一种基于JMX的可视化监视、管理工具。<br>1.启动JConsole<br>通过JDK/bin目录下的“jconsole.exe”启动JConsole后，将自动搜索出本机运行的所有虚拟机进程，不需要用户自己再使用jps来查询了，如图双击选择其中一个进程即可开始监控了，也可以使用下面的“远程进程”功能来连接远程服务器，对远程虚拟机进行监控。</p><p><img src="https://uploadfiles.nowcoder.com/images/20191109/9094293_1573274563736_6654F5DFA4EC7329FE86D88517B8FA93" alt="图片说明" title="图片标题"> </p><p><img src="https://uploadfiles.nowcoder.com/images/20191109/9094293_1573275239073_438AC748ECDB4217D868DFDE95ECFD09" alt=" " title="图片标题"> </p><p>从图中可以看出机器运行了几个本地虚拟机进程，其中OOMTest是我准备的“反面教材”代码双击它进入JConsole主界面，包括“概述”、“内存”、“线程”、“类”、“VM概要”、“MBean”六个页签。如图所示</p><p><img src="https://uploadfiles.nowcoder.com/images/20191109/9094293_1573278160273_562106A0F5A1D726229907F196EB6D40" alt="图片说明" title="图片标题"> </p><p>“概述”页签显示的是整个虚拟机主要运行数据的概览，其中包括“堆内存使用情况”、“类”、“CPU使用情况”四种信息的曲线图，这些曲线图是后面“内存”、“线程”、“类”页签的信息汇总。</p><p>2.内存监控<br>“内存”页签相当于可视化的jsat命令，用于监视收集器管理的虚拟机内存（Java堆和永久代）的变化趋势。我们通过运行代码“OOMTest”来体验一下监视功能，运行时设置的虚拟机参数为：-Xms100m -Xmx100m -XX:+UseSerialGC,这段代码的作用是以64KB/50毫秒的速度往Java堆中填充数据，一共填充1000次，使用JConsole的“内存”页签进行监视，观察曲线和柱状图指示图的变化。</p><pre><code>import java.util.ArrayList;import java.util.List;/** * @Author:luomo * @CreateTime:2019/11/9 * @Description:OOMTest */public class OOMTest {    /**     * 内存占位符对象，一个OOMObject大约占64KB     */    static class OOMobject{        public byte[] placeholder=new byte[64*1024];    }    public static void fillHeap(int num) throws InterruptedException{        List&lt;OOMobject&gt; list =new ArrayList&lt;OOMobject&gt;();        for(int i=0;i&lt;num;i++)        {            //稍作延时，令监视曲线的变化更加明显            Thread.sleep(50);            list.add(new OOMobject());        }        System.gc();    }    public static void main(String[] args)throws Exception{        fillHeap(1000);    }}</code></pre><p>程序运行后，在“内存”页签中可以看到内存池Eden区的运行趋势呈现折线状，如图。</p><p><img src="https://uploadfiles.nowcoder.com/images/20191109/9094293_1573282506435_42550CBEF3FCED46D7B42799FAD4566A" alt="图片说明" title="图片标题"> </p><p>监视范围扩大至整个堆后，会发现曲线是一条向上增长的平滑曲线。</p><p><img src="https://uploadfiles.nowcoder.com/images/20191109/9094293_1573282418309_B397F1590C7ED6E011AB02405287D0D0" alt="图片说明" title="图片标题"> </p><p>并且从柱状图可以看出，在1000次循环执行结束，运行了System.gc()后，虽然整个新生代Eden和Survivor区都基本被清空了，但是代表老年代的柱状图仍然保持峰值状态，说明被填充进堆中的数据在System.gc（）方法执行之后仍然存活。</p><p><img src="https://uploadfiles.nowcoder.com/images/20191109/9094293_1573282569188_69314B5631685BFF2D1BB4774E598582" alt="图片说明" title="图片标题"> </p><p>这里有两个小问题供读者思考：<br>1.虚拟机启动参数只限制了Java堆为100MB，没有指定-Xmn参数，能否从监控图中估计出新生代有多大？<br>2.为何执行了System.gc（）之后，图中代表老年代的柱状图仍然显示峰值状态，代码需要如何调整才能让System.gc（）回收掉填充到堆中的对象？<br>问题一：我们可以从图中知道Eden空间大小，因为没有设置-XX：SurvivorRadio参数，所以Eden与Survivor空间比例默认值为8:1，整个新生代空间这样我们可以用Eden空间大小/占新生代空间的比例，得出新生代空间的大小。<br>问题二：执行完System.gc（）之后，空间未能回收是因为List<OOMObject>list对象仍然存活，fillHeap（）方法仍然没有退出，因此list对象在System.gc（）执行时仍然处于作用域之内。如果把System.gc移动到fillHeap()方法外调用就可以回收掉全部内存。 </OOMObject></p>]]></content>
    
    <summary type="html">
    
      JConsole（Java Monitoring and Management Console）是一种基于JMX的可视化监视、管理工具。
    
    </summary>
    
    
      <category term="JVM" scheme="https://keysluomo.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>HotSpot虚拟机对象探秘</title>
    <link href="https://keysluomo.github.io/2020/06/17/HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E8%B1%A1%E6%8E%A2%E7%A7%98/"/>
    <id>https://keysluomo.github.io/2020/06/17/HotSpot虚拟机对象探秘/</id>
    <published>2020-06-16T16:42:22.000Z</published>
    <updated>2020-06-16T16:43:50.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>我们以常用的虚拟机HotSpot和常用的内存区域Java堆为例，深入了解HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程。</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化。如果没有先执行相应的类加载过程。<br>    在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务等同把一块确定大小的内存从Java堆中划分出来。假设堆中内存是绝对完整的，所有的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，所有用过的内存都放在一边，中间放着一个值指针作为分界点的指示器，这种分配方式成为“指针碰撞”。如图：<br><img src="https://uploadfiles.nowcoder.com/images/20191108/9094293_1573227083274_A840BD9C2CEC84B3EC48E4358DCDAED0 &quot;图片标题&quot;" alt="图片说明"> </p><p>如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个实例，并更新列表上的记录，这种分配方式称为“空闲列表”。如图：<br><img src="https://uploadfiles.nowcoder.com/images/20191108/9094293_1573228003290_CEBD16961637C0135ADE58567B01219F &quot;图片标题&quot;" alt="图片说明"> </p><p>选择哪种分配方式是由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩功能决定。因此，在使用serial、ParNew等带Compact过程的收集器时，系统采用的分配算法是指针碰撞，而使用CMS这种基于Mark-Sweep算法的收集器时，通常采用空闲列表。</p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（InstanceData）和对齐填充（Padding）。<br>HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark Word”。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪<br>个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不<br>一定要经过对象本身<br>第二部分实例数据是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。<br>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>建立对象是为了使用对象，我们的Java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具***置，所以对象访问方式也是取决于虚拟机实现而定的。目前主流的访问方式有使用句柄和直接指针两种。</p><p>如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息，</p><p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址，</p>]]></content>
    
    <summary type="html">
    
      我们以常用的虚拟机HotSpot和常用的内存区域Java堆为例，深入了解HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程。
    
    </summary>
    
    
      <category term="JVM" scheme="https://keysluomo.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>垃圾收集算法</title>
    <link href="https://keysluomo.github.io/2020/06/15/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    <id>https://keysluomo.github.io/2020/06/15/垃圾收集算法/</id>
    <published>2020-06-15T12:00:00.000Z</published>
    <updated>2020-06-15T12:09:10.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h1><p><img src="/2020/06/15/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/1.png" alt="图片说明"><br>最基础的收集算法是“标记清除”算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象，它的标记过程其实在前一节讲述对象标记判定时已经介绍过了。之所以说他是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其不足进行改进而得到的。<br>主要不足：</p><ul><li>效率问题，标记和清除两个过程的效率都不高；</li><li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能导致以后再程序过程中需要分配较大的对象时，无法找到连续内存而不得不提前触发另一次垃圾收集动作</li></ul><h1 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h1><p><img src="/2020/06/15/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/2.png" alt="图片说明"><br>为了解决效率问题，一种称为复制的收集算法出现了，他将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完了，就将还存活着的对象复制到另一块上面，然后再把已经使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂的情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。<br>主要不足：</p><ul><li>将内存缩小为了原来的一半，在对象存活率较高时就要进行较多的复制操作，效率将会变低。</li></ul><h1 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h1><p><img src="/2020/06/15/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/3.png" alt="图片说明"><br>根据老年代的特点，有人提出了另外一种“标记-整理”算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。<br>主要不足：</p><ul><li>它对内存变动更频繁，需要整理所有存活对象的引用地址，在效率上比复制算法要差很多。</li></ul><h1 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h1><p>当前商业虚拟机的垃圾收集器都采用“分代收集”算法，这种算法并没有什么新的思想，知识根据对象存活周期的不同将内存划分为几块。分代收集算法分代收集算法（Generational Collection）严格来说并不是一种思想或理论，而是融合上述3种基础的算法思想，而产生的针对不同情况所采用不同算法的一套组合拳。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收。</p>]]></content>
    
    <summary type="html">
    
      由于垃圾收集算法的实现涉及大量的程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，因此本文只是介绍几种算法的思想
    
    </summary>
    
      <category term="JVM" scheme="https://keysluomo.github.io/categories/JVM/"/>
    
    
      <category term="垃圾收集算法" scheme="https://keysluomo.github.io/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何判断对象是否死亡?</title>
    <link href="https://keysluomo.github.io/2020/06/15/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%AD%BB%E4%BA%A1/"/>
    <id>https://keysluomo.github.io/2020/06/15/如何判断对象是否死亡/</id>
    <published>2020-06-15T11:30:34.000Z</published>
    <updated>2020-06-15T12:24:20.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”，判断对象的生死存活都有那些算法？</p><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>实现原理：给对象中添加一个引用计数器，每当一个地方引用它是，计数器值就加1；任何时刻计数器为0的对象就是不可能再被使用的。<br>但是主流的Java虚拟机里面没有选用引用计数算法来管理内存，其中主要的原因是它很难解决对象之间相互引用的问题。<br>如下一个简单的例子：请看测试代码：对象objA和objB都有字段instance，赋值令 objA.instance=objB及objB.instance=objA，实际上这两个对象已经不可能再被访问了，但是他们因为互相引用这对方，导致引用计数都不为0，于是引用计数算法无法通过GC收集器回收他们。</p><pre><code>public class ReferenceCountingGC {    /**     * @Author: luomo     * @CreateTime: 2019/11/4     * @Description: 引用计数算法     */    public Object instance = null;    private  static final int _1MB=1024*1024;    /**     *  这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否被回收     */    private  byte[] bigSize =new byte[2 * _1MB];    public static void testGC(){        ReferenceCountingGC objA =new  ReferenceCountingGC();        ReferenceCountingGC objB =new ReferenceCountingGC();        objA.instance=objB;        objB.instance=objA;        objA =null;        objB =null;        System.gc();    }    public  static void main(String[] args){        testGC();    }}</code></pre><p>程序运行结果如下：<br><img src="/2020/06/15/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%AD%BB%E4%BA%A1/1.png" alt=" "><br>从运行结果中可以清楚看出虚拟机并没有因为互相引用就不回收他们，这也从侧面说明虚拟机并不是通过引用计数算法来判断对象是否存活的。</p><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>实现原理：在主流的语言的主流实现中，比如Java、C#、甚至是古老的Lisp都是使用的可达性分析算法来判断对象是否存活的。</p><p>这个算法的核心思路就是通过一些列的“GC Roots”对象作为起始点，从这些对象开始往下搜索，搜索所经过的路径称之为“引用链”。</p><p>当一个对象到GC Roots没有任何引用链相连的时候，证明此对象是可以被回收的。如下图所示：<br><img src="/2020/06/15/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%AD%BB%E4%BA%A1/2.png" alt="图片说明"><br>在Java中，可作为GC Roots对象的列表：</p><ul><li>Java虚拟机栈中的引用对象。</li><li>本地方法栈中JNI（既一般说的Native方法）引用的对象。</li><li>方法区中类静态常量的引用对象。</li><li>方法区中常量的引用对象。</li></ul>]]></content>
    
    <summary type="html">
    
      在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”，判断对象的生死存活都有那些算法？
    
    </summary>
    
      <category term="JVM" scheme="https://keysluomo.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://keysluomo.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机运行时数据区域</title>
    <link href="https://keysluomo.github.io/2020/06/15/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/"/>
    <id>https://keysluomo.github.io/2020/06/15/Java虚拟机运行时数据区域/</id>
    <published>2020-06-15T10:57:52.000Z</published>
    <updated>2020-06-15T12:21:51.783Z</updated>
    
    <content type="html"><![CDATA[<p>#概述<br>&emsp;&emsp;对于从事C、C++程序开发人员来说，在内存管理领域，他们既是拥有最高权力的“皇帝”又是从事最基础工作的“劳动人民”-既拥有每一个对象的“所有权”，又担负着每一个对象生命开始到终结的维护责任。<br>对于Java 程序员来说，在虚拟机自动内存管理机制的帮助下，不在需要为每一个new操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，由虚拟机管理内存这一切看起来都很美好。然而一旦出现内存泄漏和溢出的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将异常艰难。Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的<br>用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而<br>建立和销毁。</p><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p>&emsp;&emsp;Java 虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间。<br><img src="/2020/06/15/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/JVM.png" alt="图片说明"> </p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>&emsp;&emsp;程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环跳转、异常处理、线程恢复等基础功能都需要依赖这个技术器来完成。</p><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>&emsp;&emsp;与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的时Java方法执行的内存模型：每个方法在执行的相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个放法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈出栈的过程。  </p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>&emsp;&emsp;本地方法栈与虚拟机栈所发挥的作用是非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native法服务。在虚拟机规范中对被地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutofMemoryError异常。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>&emsp;&emsp;对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有对象实例以及数组都要在堆上分配,但是随着JIT<br>编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换[2]优化技术将会导致一些微妙的变化发生，所有的<br>对象都分配在堆上也渐渐变得不是那么“绝对”了。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p> &emsp;&emsp;   方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名Non-Heap（非堆），目的应该是与Java堆区分开来</p>]]></content>
    
    <summary type="html">
    
      对于从事C、C++程序开发人员来说，在内存管理领域，他们既是拥有最高权力的“皇帝”又是从事最基础工作的“劳动人民”-既拥有每一个对象的“所有权”，又担负着每一个对象生命开始到终结的维护责任。对于Java 程序员来说，在虚拟机自动内存管理机制的帮助下，不在需要为每一个new操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，由虚拟机管理内存这一切看起来都很美好。然而一旦出现内存泄漏和溢出的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将异常艰难。
    
    </summary>
    
      <category term="JVM" scheme="https://keysluomo.github.io/categories/JVM/"/>
    
    
      <category term="运行时数据区域" scheme="https://keysluomo.github.io/tags/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java线程死锁</title>
    <link href="https://keysluomo.github.io/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/"/>
    <id>https://keysluomo.github.io/2020/06/15/Java线程死锁/</id>
    <published>2020-06-15T10:28:39.000Z</published>
    <updated>2020-06-15T10:42:53.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java线程死锁"><a href="#Java线程死锁" class="headerlink" title="Java线程死锁"></a>Java线程死锁</h1><blockquote><br>死锁是一种特定的程序状态，在实体之间，由于循环依赖导致彼此一直处于等待之中，没有 任何个体可以继续前进。死锁不仅仅是在线程之间会发生，存在资源独占的进程之间同样也 可能出现死锁。通常来说，我们大多是聚焦在多线程场景中的死锁，指两个或多个线程之 间，由于互相持有对方需要的锁，而永久处于阻塞的状态。<br><br></blockquote><p><strong>Java线程死锁</strong>是一个经典的多线程问题，因为不同的线程都在等待那些根本不可能被释放的锁，从而导致所有的工作都无法完成。如图所示</p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁.png" alt="图片说明"> </p><hr><h2 id="如何去定位Java线程死锁呢？"><a href="#如何去定位Java线程死锁呢？" class="headerlink" title="如何去定位Java线程死锁呢？"></a>如何去定位Java线程死锁呢？</h2><p>定位死锁最常见的方式就是利用 jstack 等工具获取线程栈，然后定位互相之间的依赖关系，进而找到死锁。如果是比较明显的死锁，往往 jstack 等就能直接定位，类似 JConsole 甚至可以在图形界面进行有限的死锁检测。<br>既然了解了用什么工具去定位线程死锁，那我们模拟一个Java线程死锁的情况，实战定位线程死锁<br><strong>死锁代码：</strong></p><pre><code>/** * @Author:luomo * @CreateTime: 2020/3/28 * @Description:模拟DeadLock */public class deadLock implements Runnable{    public static  Object obj1=new Object();    public static  Object obj2=new Object();    private int flag;    deadLock(int flag){        this.flag=flag;    }    @Override    public void run() {        if(flag==0){            synchronized (obj1){                System.out.println(Thread.currentThread().getName()+&quot;成功获取锁1&quot;);                try {                    Thread.currentThread().sleep(1000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                System.out.println(Thread.currentThread().getName()+&quot;尝试获取锁2&quot;);                synchronized (obj2){                    System.out.println(Thread.currentThread().getName()+&quot;成功获取锁2&quot;);                }            }        }else{            synchronized (obj2){                System.out.println(Thread.currentThread().getName()+&quot;成功获取锁2&quot;);                try {                    Thread.currentThread().sleep(1000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                System.out.println(Thread.currentThread().getName()+&quot;尝试获取锁1&quot;);                synchronized (obj1){                    System.out.println(Thread.currentThread().getName()+&quot;成功获取锁2&quot;);                }            }        }    }    public static void main(String[] args) {   deadLock d1=new deadLock(0);   deadLock d2=new deadLock(1);   Thread thread1=new Thread(d1);   Thread thread2=new Thread(d2);   thread1.start();   thread2.start();    }}</code></pre><p><strong>代码运行：</strong></p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁1.png" alt=" "> </p><p>从运行结果我们看到Thread1和Thread0同时都在争用对方已经占有的锁，进而产生死锁。</p><hr><h2 id="如何定位死锁"><a href="#如何定位死锁" class="headerlink" title="如何定位死锁"></a>如何定位死锁</h2><p>如果程序发生了死锁，我们如何去定位死锁？我们可以通过JConsole工具来发现死锁。<br>打开cmd：输入 JConsole 回车<br>我们可以看到一个可视化的工具，找到死锁进程点击连接</p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁2.png" alt="图片说明"> </p><p>我们可以看到有检查死锁的选项</p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁3.png" alt="图片说明"> </p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁4.png" alt="图片说明"> </p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁5.png" alt="图片说明"> </p><p>通过上图我们可以发现产生死锁的线程，从而定位到发生死锁的代码。</p><p>当然我们还可以使用Jstack + pid的方式来定位问题</p><p><img src="/2020/06/15/Java%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81/死锁6.png" alt="图片说明"> </p>]]></content>
    
    <summary type="html">
    
      预览描述
    
    </summary>
    
      <category term="Java" scheme="https://keysluomo.github.io/categories/Java/"/>
    
    
      <category term="死锁" scheme="https://keysluomo.github.io/tags/%E6%AD%BB%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Kafka实现高吞吐之零拷贝</title>
    <link href="https://keysluomo.github.io/2020/06/15/Kafka%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>https://keysluomo.github.io/2020/06/15/Kafka实现高吞吐之零拷贝/</id>
    <published>2020-06-15T10:04:27.000Z</published>
    <updated>2020-06-15T10:48:43.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Kafka是一个非常优秀的消息开源系统，作为分布式的消息队列之所以能够实现高吞吐，其中的一个原因就是sendFile 的零拷贝</p><h2 id="关于零拷贝"><a href="#关于零拷贝" class="headerlink" title="关于零拷贝"></a>关于零拷贝</h2><p>&quot;零拷贝&quot;中的&quot;拷贝&quot;是操作系统在I/O操作中,将数据从一个内存区域复制到另外一个内存区域. 而&quot;零&quot;并不是指0次复制, 更多的是指在用户态和内核态之前的复制是0次.</p><h2 id="CPU-COPY"><a href="#CPU-COPY" class="headerlink" title="CPU COPY"></a>CPU COPY</h2><p>通过计算机的组成原理我们知道, 内存的读写操作是需要CPU的协调数据总线,地址总线和控制总线来完成的<br>因此在&quot;拷贝&quot;发生的时候,往往需要CPU暂停现有的处理逻辑,来协助内存的读写.这种我们称为CPU COPY，CPU COPY不但占用了CPU资源,还占用了总线的带宽.</p><h2 id="DMA-COPY"><a href="#DMA-COPY" class="headerlink" title="DMA COPY"></a>DMA COPY</h2><p>DMA(DIRECT MEMORY ACCESS)是现代计算机的重要功能. 它的一个重要 的特点就是, 当需要与外设进行数据交换时, CPU只需要初始化这个动作便可以继续执行其他指令,剩下的数据传输的动作完全由DMA来完成，可以看到DMA COPY是可以避免大量的CPU中断的</p><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>本文中的上下文切换时指由用户态切换到内核态, 以及由内核态切换到用户态<br>存在多次拷贝的原因？</p><ul><li><p>操作系统为了保护系统不被应用程序有意或无意地破坏,为操作系统设置了用户态和内核态两种状态.用户态想要获取系统资源(例如访问硬盘), 必须通过系统调用进入到内核态, 由内核态获取到系统资源,再切换回用户态返回应用程序.</p></li><li><p>出于&quot;readahead cache&quot;和异步写入等等性能优化的需要, 操作系统在内核态中也增加了一个&quot;内核缓冲区&quot;(kernel buffer). 读取数据时并不是直接把数据读取到应用程序的buffer, 而先读取到kernel buffer, 再由kernel buffer复制到应用程序的buffer. 因此,数据在被应用程序使用之前,可能需要被多次拷贝  </p></li></ul><p>所有<strong>涉及到数据传输</strong>的场景, 无非就一种:从硬盘上读取文件数据, 发送到网络上去。<br>这个场景我们简化为一个模型:</p><p> File.read(fileDesc, buf, len);<br> Socket.send(socket, buf, len);<br>为了方便描述,上面这两行代码, 我们给它起个名字: read-send模型</p><p>操作系统在实现这个read-send模型时,需要有以下步骤:</p><ol><li>应用程序开始读文件的操作</li><li>应用程序发起系统调用, 从用户态切换到内核态(第一次上下文切换)</li><li>内核态中把数据从硬盘文件读取到内核中间缓冲区(kernel buf)</li><li>数据从内核中间缓冲区(kernel buf)复制到(用户态)应用程序缓冲区(app buf),从内核态切换回到用户态(第二次上下文切换)</li><li>应用程序开始发送数据到网络上</li><li>应用程序发起系统调用,从用户态切换到内核态(第三次上下文切换)</li><li>内核中把数据从应用程序(app buf)的缓冲区复制到socket的缓冲区(socket)</li><li>内核中再把数据从socket的缓冲区(socket buf)发送的网卡的缓冲区(NIC buf)上</li><li>从内核态切换回到用户态(第四次上下文切换)</li></ol><p><img src="/2020/06/15/Kafka%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D/kafka.png" alt="图片说明"> </p><p>由上图可以很清晰地看到, 一次read-send涉及到了四次拷贝:</p><ol><li>硬盘拷贝到内核缓冲区(DMA COPY)</li><li>内核缓冲区拷贝到应用程序缓冲区(CPU COPY)</li><li>应用程序缓冲区拷贝到socket缓冲区(CPU COPY)</li><li>socket buf拷贝到网卡的buf(DMA COPY)  </li></ol><p>其中涉及到2次cpu中断, 还有4次的上下文切换，很明显,第2次和第3次的的copy只是把数据复制到app buffer又原封不动的复制回来, 为此带来了两次的cpu copy和两次上下文切换, 是完全没有必要的，linux的零拷贝技术就是为了优化掉这两次不必要的拷贝</p><h2 id="sendFile"><a href="#sendFile" class="headerlink" title="sendFile"></a>sendFile</h2><p>linux内核2.1开始引入一个叫sendFile系统调用,这个系统调用可以在内核态内把数据从内核缓冲区直接复制到套接字(SOCKET)缓冲区内, 从而可以减少上下文的切换和不必要数据的复制<br>有了sendFile这个系统调用后, 我们read-send模型就可以简化为:</p><ol><li>应用程序开始读文件的操作</li><li>应用程序发起系统调用, 从用户态切换到内核态(第一次上下文切换)</li><li>内核态中把数据从硬盘文件读取到内核中间缓冲区</li><li>通过sendFile,在内核态中把数据从内核缓冲区复制到socket的缓冲区</li><li>内核中再把数据从socket的缓冲区发送的网卡的buf上</li><li>从内核态切换到用户态(第二次上下文切换)  </li></ol><p><img src="/2020/06/15/Kafka%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%90%9E%E5%90%90%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D/kafka1.png" alt="图片说明"><br>如图所示：<br>涉及到数据拷贝变成:</p><ol><li>硬盘拷贝到内核缓冲区(DMA COPY)</li><li>内核缓冲区拷贝到socket缓冲区(CPU COPY)</li><li>socket缓冲区拷贝到网卡的buf(DMA COPY)</li></ol><p>可以看到,一次read-send模型中, 利用sendFile系统调用后, 可以将4次数据拷贝减少到3次, 4次上下文切换减少到2次, 2次CPU中断减少到1次，<br>相对传统I/O, 这种零拷贝技术通过减少两次上下文切换, 1次cpu copy, <strong>可以将I/O性能提高50%以上(网络数据, 未亲测)</strong>，开始的术语中说到, 所谓的<strong>零拷贝的&quot;零&quot;</strong>, <strong>是指用户态和内核态之间的拷贝次数为0</strong>, 从这个定义上来说, 现在的这个零拷贝技术已经是真正的&quot;零&quot;了</p>]]></content>
    
    <summary type="html">
    
      Kafka是一个非常优秀的消息开源系统，作为分布式的消息队列之所以能够实现高吞吐，其中的一个原因就是sendFile 的零拷贝
    
    </summary>
    
      <category term="Kafka" scheme="https://keysluomo.github.io/categories/Kafka/"/>
    
    
      <category term="零拷贝" scheme="https://keysluomo.github.io/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 概述</title>
    <link href="https://keysluomo.github.io/2020/06/14/Kafka-%E6%A6%82%E8%BF%B0/"/>
    <id>https://keysluomo.github.io/2020/06/14/Kafka-概述/</id>
    <published>2020-06-14T06:08:08.000Z</published>
    <updated>2020-06-14T06:11:03.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka诞生的背景"><a href="#kafka诞生的背景" class="headerlink" title="kafka诞生的背景"></a>kafka诞生的背景</h1><p>对于一个高效的组织，所有数据需要对该组织的所有服务和系统是可用的，以便挖掘出数据的最大价值。数据采集和数据使用是一个金字塔的结构，底部为以某种统一的方式捕获数据，这些数据需要以统一的方式建模，以方便读取和处理。捕获数据的工作做扎实后，在这个基础上以不同方法处理这些数据就变得得心应手。<br>数据捕获的来源主要有两种：一种是记录正在发生的事件数据。比如Web系统中的用户活动日志（用户的点击选择等）、交警行业中的违章事件等。随着传统行业业务活动的数字化，事件数据正在不断增长，而且这个趋势没有停止。这种类型的事件数据记录了已经发生的事情，往往比传统数据库应用要大好几个数量级。因此对于数据的捕获、数据的处理提出了重大的挑战；另一种是经过二次分析处理之后的数据。对捕获的数据进行二次分析处理后得到的数据也需要记录保存，这里的处理指的是利用批处理、图分析等专有的数据处理系统进行了处理，这些加工后的数据可以作为数据捕获的第二个来源。总之，捕获的数据越来越多，如何将这些巨量的数据以可靠的、完整的数据流方式传递给数据分析处理系统也变得越来越困难。</p><h1 id="Kafka是什么"><a href="#Kafka是什么" class="headerlink" title="Kafka是什么"></a>Kafka是什么</h1><p>在流式计算中，Kafka一般用来缓存数据，Storm通过消费Kafka的数据进行计算。<br>1）Apache Kafka是一个开源消息系统，由Scala写成。是由Apache软件基金会开发的一个开源消息系统项目。<br>2）Kafka最初是由LinkedIn公司开发，并于    2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。<br>3）Kafka是一个分布式消息队列。Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer，消息接受者称为Consumer，此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。<br>4）无论是kafka集群，还是producer和consumer都依赖于zookeeper集群保存一些meta信息，来保证系统可用性。</p><h1 id="消息队列内部实现原理"><a href="#消息队列内部实现原理" class="headerlink" title="消息队列内部实现原理"></a>消息队列内部实现原理</h1><p><img src="https://uploadfiles.nowcoder.com/images/20190920/9094293_1568975462389_04F96407B00295C6D53D599B4F14DC90" alt="图片说明" title="图片标题"> </p><p>  （1）点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）<br>点对点模型通常是一个基于拉取或者轮询的消息传送模型，这种模型从队列中请求信息，而不是将消息推送到客户端。这个模型的特点是发送到队列的消息被一个且只有一个接收者接收处理，即使有多个消息监听者也是如此。<br>（2）发布/订阅模式（一对多，数据生产后，推送给所有订阅者）<br>发布订阅模型则是一个基于推送的消息传送模型。发布订阅模型可以有多种不同的订阅者，临时订阅者只在主动监听主题时才接收消息，而持久订阅者则监听主题的所有消息，即使当前订阅者不可用，处于离线状态。</p><h1 id="为什么需要消息队列"><a href="#为什么需要消息队列" class="headerlink" title="为什么需要消息队列"></a>为什么需要消息队列</h1><p>1）解耦：<br>　　允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。<br>2）冗余：<br>消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。<br>3）扩展性：<br>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。<br>4）灵活性 &amp; 峰值处理能力：<br>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。<br>5）可恢复性：<br>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。<br>6）顺序保证：<br>在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。（Kafka保证一个Partition内的消息的有序性）<br>7）缓冲：<br>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。<br>8）异步通信：<br>很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p><h1 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h1><p><img src="https://uploadfiles.nowcoder.com/images/20190920/9094293_1568975497955_62B3F472CB3D859915FB4C3B0BBEBAAE" alt="图片说明" title="图片标题"><br>1）Producer ：消息生产者，就是向kafka broker发消息的客户端。<br>2）Consumer ：消息消费者，向kafka broker取消息的客户端<br>3）Topic ：可以理解为一个队列。<br>4） Consumer Group （CG）：这是kafka用来实现一个topic消息的广播（发给所有的consumer）和单播（发给任意一个consumer）的手段。一个topic可以有多个CG。topic的消息会复制-给consumer。如果需要实现广播，只要每个consumer有一个独立的CG就可以了。要实现单播只要所有的consumer在同一个CG。用CG还可以将consumer进行自由的分组而不需要多次发送消息到不同的topic。<br>5）Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。<br>6）Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中的顺序将消息发给consumer，不保证一个topic的整体（多个partition间）的顺序。<br>7）Offset：kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka</p><h1 id="分布式模型"><a href="#分布式模型" class="headerlink" title="分布式模型"></a>分布式模型</h1><p>   Kafka每个主题的多个分区日志分布式地存储在Kafka集群上，同时为了故障容错，每个分区都会以副本的方式复制到多个消息代理节点上。其中一个节点会作为主副本（Leader），其他节点作为备份副本（Follower，也叫作从副本）。主副本会负责所有的客户端读写操作，备份副本仅仅从主副本同步数据。当主副本出现故障时，备份副本中的一个副本会被选择为新的主副本。因为每个分区的副本中只有主副本接受读写，所以每个服务器端都会作为某些分区的主副本，以及另外一些分区的备份副本，这样Kafka集群的所有服务端整体上对客户端是负载均衡的。<br>       Kafka的生产者和消费者相对于服务器端而言都是客户端。<br>Kafka生产者客户端发布消息到服务端的指定主题，会指定消息所属的分区。生产者发布消息时根据消息是否有键，采用不同的分区策略。消息没有键时，通过轮询方式进行客户端负载均衡；消息有键时，根据分区语义（例如hash）确保相同键的消息总是发送到同一分区。<br>       Kafka的消费者通过订阅主题来消费消息，并且每个消费者都会设置一个消费组名称。因为生产者发布到主题的每一条消息都只会发送给消费者组的一个消费者。所以，如果要实现传统消息系统的“队列”模型，可以让每个消费者都拥有相同的消费组名称，这样消息就会负责均衡到所有的消费者；如果要实现“发布-订阅”模型，则每个消费者的消费者组名称都不相同，这样每条消息就会广播给所有的消费者。<br>       分区是消费者现场模型的最小并行单位。如下图（图1）所示，生产者发布消息到一台服务器的3个分区时，只有一个消费者消费所有的3个分区。在下图（图2）中，3个分区分布在3台服务器上，同时有3个消费者分别消费不同的分区。假设每个服务器的吞吐量时300MB，在下图（图1）中分摊到每个分区只有100MB，而在下图（图2）中，集群整体的吞吐量有900MB。可以看到，增加服务器节点会提升集群的性能，增加消费者数量会提升处理性能。<br>       同一个消费组下多个消费者互相协调消费工作，Kafka会将所有的分区平均地分配给所有的消费者实例，这样每个消费者都可以分配到数量均等的分区。Kafka的消费组管理协议会动态地维护消费组的成员列表，当一个新消费者加入消费者组，或者有消费者离开消费组，都会触发再平衡操作。<br><img src="https://uploadfiles.nowcoder.com/images/20190920/9094293_1568975534470_558AC9E4B632C16EBB53304E1BB3518A" alt="图片说明" title="图片标题"><br>Kafka的消费者消费消息时，只保证在一个分区内的消息的完全有序性，并不保证同一个主题汇中多个分区的消息顺序。而且，消费者读取一个分区消息的顺序和生产者写入到这个分区的顺序是一致的。比如，生产者写入“hello”和“Kafka”两条消息到分区P1，则消费者读取到的顺序也一定是“hello”和“Kafka”。如果业务上需要保证所有消息完全一致，只能通过设置一个分区完成，但这种做法的缺点是最多只能有一个消费者进行消费。一般来说，只需要保证每个分区的有序性，再对消息假设键来保证相同键的所有消息落入同一分区，就可以满足绝大多数的应用。</p>]]></content>
    
    <summary type="html">
    
      Kafka诞生的背景
    
    </summary>
    
      <category term="Kafka" scheme="https://keysluomo.github.io/categories/Kafka/"/>
    
    
      <category term="Kafka" scheme="https://keysluomo.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spark Demo(Serializable)</title>
    <link href="https://keysluomo.github.io/2020/06/14/Spark-Demo-Serializable/"/>
    <id>https://keysluomo.github.io/2020/06/14/Spark-Demo-Serializable/</id>
    <published>2020-06-14T04:44:46.000Z</published>
    <updated>2020-06-14T04:46:44.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在本文中将介绍spark中Task执行序列化的开发问题</p><h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><p>本实验Spark运行在Windows上，为了开发Spark应用程序，在本地机器上需要有Jdk1.8和Maven环境。<br>确保我们的环境配置正常，我们可以使用快捷键 Win+R 输入cmd：<br>环境如下：<br><img src="https://uploadfiles.nowcoder.com/images/20191029/9094293_1572341256892_8D8973B8667179A2319B041328F690BD" alt="图片说明" title="图片标题"><br>程序开发工具我们使用IDEA，创建maven项目，添加pom依赖</p><h1 id="编写Spark程序"><a href="#编写Spark程序" class="headerlink" title="编写Spark程序"></a>编写Spark程序</h1><h2 id="目录结构如下"><a href="#目录结构如下" class="headerlink" title="目录结构如下:"></a>目录结构如下:</h2><p><img src="https://uploadfiles.nowcoder.com/images/20191029/9094293_1572341490332_07386CADB58D4E8A80763A83F9F6B34D" alt="图片说明" title="图片标题"> </p><h2 id="创建Serializable-scala"><a href="#创建Serializable-scala" class="headerlink" title="创建Serializable.scala:"></a>创建Serializable.scala:</h2><p>首先我们需要了解RDD中的函数传递：<br>在实际开发中我们往往需要自己定义一些对于RDD的操作，那么此时需要主要的是，初始化工作是在Driver端进行的，而实际运行程序是在Executor端进行的，这就涉及到了跨进程通信，是需要序列化的。<br>如果我们对我们自定义的类不进行序列化：</p><pre><code>package SparkDemoimport org.apache.spark.rdd.RDDimport org.apache.spark.{SparkConf, SparkContext}/**  * @Author: luomo  * @CreateTime: 2019/10/29  * @Description: Serializable from Driver to Executor  */object Serializable {  def main(args: Array[String]): Unit = {    //创建Spark上下文对象    val config:SparkConf =new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;Serializable&quot;)    //创建Spark上下文对象    val sc = new SparkContext(config)    val rdd:RDD[String] = sc.parallelize(Array(&quot;hadoop&quot;,&quot;spark&quot;,&quot;hive&quot;,&quot;Flink&quot;))    val search = new Search(&quot;h&quot;)    val match1:RDD[String] =search.getMatch1(rdd)    match1.collect().foreach(println)    sc.stop()  }  class Search(query:String){    //过滤出包含字符串的数据    def  isMatch(s:String):Boolean ={      s.contains(query)    }    //过滤出包含字符串的RDD    def getMatch1(rdd:RDD[String]) :RDD[String] = {      rdd.filter(isMatch)    }    //过滤出包含字符串的RDD    def getMatche2(rdd: RDD[String]): RDD[String] ={      rdd.filter(x=&gt; x.contains(query))    }  }}</code></pre><p>如图：<br><img src="https://uploadfiles.nowcoder.com/images/20191029/9094293_1572346997711_619AA778B91D5D25CAB063D1C7D53FFE" alt="图片说明" title="图片标题"> </p><p>可见，对于自己定义的普通类，Spark是无法直接将其序列化的。<br>需要我们自定义的类继承java.io.Serializable</p><pre><code>package SparkDemoimport org.apache.spark.rdd.RDDimport org.apache.spark.{SparkConf, SparkContext}/**  * @Author: luomo  * @CreateTime: 2019/10/29  * @Description: Serializable from Driver to Executor  */object Serializable {  def main(args: Array[String]): Unit = {    //创建Spark上下文对象    val config:SparkConf =new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;Serializable&quot;)    //创建Spark上下文对象    val sc = new SparkContext(config)    val rdd:RDD[String] = sc.parallelize(Array(&quot;hadoop&quot;,&quot;spark&quot;,&quot;hive&quot;,&quot;Flink&quot;))    val search = new Search(&quot;h&quot;)    val match1:RDD[String] =search.getMatch1(rdd)    match1.collect().foreach(println)    sc.stop()  }  //自定义类  class Search(query:String) extends  java.io.Serializable {    //过滤出包含字符串的数据    def  isMatch(s:String):Boolean ={      s.contains(query)    }    //过滤出包含字符串的RDD    def getMatch1(rdd:RDD[String]) :RDD[String] = {      rdd.filter(isMatch)    }    //过滤出包含字符串的RDD    def getMatche2(rdd: RDD[String]): RDD[String] ={      rdd.filter(x=&gt; x.contains(query))    }  }}</code></pre><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><p>如图我们过滤出包含字符h的字符串：<br><img src="https://uploadfiles.nowcoder.com/images/20191029/9094293_1572351464995_DFD27DCB713FEB02D8628E6C67FD4273" alt="图片说明" title="图片标题"> </p>]]></content>
    
    <summary type="html">
    
      在本文中将介绍spark中Task执行序列化的开发问题
    
    </summary>
    
      <category term="Spark" scheme="https://keysluomo.github.io/categories/Spark/"/>
    
    
      <category term="Serializable" scheme="https://keysluomo.github.io/tags/Serializable/"/>
    
  </entry>
  
  <entry>
    <title>Apache Spark简单构建一个应用程序</title>
    <link href="https://keysluomo.github.io/2020/06/14/Apache-Spark%E7%AE%80%E5%8D%95%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://keysluomo.github.io/2020/06/14/Apache-Spark简单构建一个应用程序/</id>
    <published>2020-06-14T03:52:44.000Z</published>
    <updated>2020-06-14T04:02:37.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单的构建一个Apache-Spark应用程序"><a href="#简单的构建一个Apache-Spark应用程序" class="headerlink" title="简单的构建一个Apache Spark应用程序"></a>简单的构建一个Apache Spark应用程序</h1><h2 id="开发环境的准备："><a href="#开发环境的准备：" class="headerlink" title="开发环境的准备："></a>开发环境的准备：</h2><p>Spark 可以运行在 Linux, Max OS X, 或者是 Windows 上。这里我是在Windows上运行的。在本地机器上需要有Java8.x和maven环境，另外我们推荐使用 ItelliJ IDEA 作为 Flink 应用程序的开发 IDE。<br>首先在我们的pom.xml文件中添加Spark相关的依赖。<br>pom如下：</p><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;SparkDemo&lt;/groupId&gt;  &lt;artifactId&gt;SparkDemo&lt;/artifactId&gt;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;  &lt;inceptionYear&gt;2008&lt;/inceptionYear&gt;  &lt;properties&gt;    &lt;scala.version&gt;2.11.1&lt;/scala.version&gt;  &lt;/properties&gt;  &lt;repositories&gt;    &lt;repository&gt;      &lt;id&gt;scala-tools.org&lt;/id&gt;      &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt;      &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt;    &lt;/repository&gt;  &lt;/repositories&gt;  &lt;pluginRepositories&gt;    &lt;pluginRepository&gt;      &lt;id&gt;scala-tools.org&lt;/id&gt;      &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt;      &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt;    &lt;/pluginRepository&gt;  &lt;/pluginRepositories&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;      &lt;artifactId&gt;scala-library&lt;/artifactId&gt;      &lt;version&gt;${scala.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;      &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt;      &lt;version&gt;2.2.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;junit&lt;/groupId&gt;      &lt;artifactId&gt;junit&lt;/artifactId&gt;      &lt;version&gt;4.4&lt;/version&gt;      &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.specs&lt;/groupId&gt;      &lt;artifactId&gt;specs&lt;/artifactId&gt;      &lt;version&gt;1.2.5&lt;/version&gt;      &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;  &lt;build&gt;    &lt;sourceDirectory&gt;src/main/scala&lt;/sourceDirectory&gt;    &lt;testSourceDirectory&gt;src/test/scala&lt;/testSourceDirectory&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;        &lt;executions&gt;          &lt;execution&gt;            &lt;goals&gt;              &lt;goal&gt;compile&lt;/goal&gt;              &lt;goal&gt;testCompile&lt;/goal&gt;            &lt;/goals&gt;          &lt;/execution&gt;        &lt;/executions&gt;        &lt;configuration&gt;          &lt;scalaVersion&gt;${scala.version}&lt;/scalaVersion&gt;          &lt;args&gt;            &lt;arg&gt;-target:jvm-1.5&lt;/arg&gt;          &lt;/args&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-eclipse-plugin&lt;/artifactId&gt;        &lt;configuration&gt;          &lt;downloadSources&gt;true&lt;/downloadSources&gt;          &lt;buildcommands&gt;            &lt;buildcommand&gt;ch.epfl.lamp.sdt.core.scalabuilder&lt;/buildcommand&gt;          &lt;/buildcommands&gt;          &lt;additionalProjectnatures&gt;            &lt;projectnature&gt;ch.epfl.lamp.sdt.core.scalanature&lt;/projectnature&gt;          &lt;/additionalProjectnatures&gt;          &lt;classpathContainers&gt;            &lt;classpathContainer&gt;org.eclipse.jdt.launching.JRE_CONTAINER&lt;/classpathContainer&gt;            &lt;classpathContainer&gt;ch.epfl.lamp.sdt.launching.SCALA_CONTAINER&lt;/classpathContainer&gt;          &lt;/classpathContainers&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/build&gt;  &lt;reporting&gt;    &lt;plugins&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;        &lt;configuration&gt;          &lt;scalaVersion&gt;${scala.version}&lt;/scalaVersion&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;  &lt;/reporting&gt;&lt;/project&gt;</code></pre><p>工作目录：<br><img src="https://uploadfiles.nowcoder.com/images/20191024/9094293_1571913840705_C0C094E4A298BFA098F8123797C7F7CC" alt="图片说明" title="图片标题"><br>编写Spark程序：<br>创建WordCount程序：</p><pre><code>package SparkDemoimport org.apache.spark.{SparkConf, SparkContext}import org.apache.spark.rdd.RDD/**  * @Author: luomo  * @CreateTime: 2019/10/24  * @Description:WordCount  */object WordCount {  def main(args: Array[String]): Unit = {    //配置文件    val conf = new SparkConf().      setAppName(&quot;wordcount&quot;) // 运行时候的作业名称      .setMaster(&quot;local&quot;)    //上下文 拿着Conf信息创建出来 写spark应用程序的对象  通往集群的入口    val sc = new SparkContext(conf)    //传入文件对象 返回RDD集合    val input = sc.textFile(&quot;E:///test.txt&quot;)    //对文件行数据 按照空格切割 返回RDD集合 得到每个单词    val lines = input.flatMap(line =&gt; line.split(&quot; &quot;))    //统计单词数量 计数 得到RDD集合 按照相同的Key先分组，之后再对组内的Value进行操作    val count = lines.map(word =&gt; (word, 1)).reduceByKey(_ + _)    //将结果遍历打印到控制台    count.foreach(x =&gt;{      println(x)    })    //将结果输出到文件中    val output = count.saveAsTextFile(&quot;E:///wordCount&quot;)    //关闭流 在内存中释放这个spark对象    //sc.stop()  }}</code></pre><p>运行程序如图：<br><img src="https://uploadfiles.nowcoder.com/images/20191024/9094293_1571914229568_474EA976C3A9A912CB36A0631F855823" alt="图片说明" title="图片标题"> </p>]]></content>
    
    <summary type="html">
    
      预览描述
    
    </summary>
    
      <category term="Spark" scheme="https://keysluomo.github.io/categories/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark Error</title>
    <link href="https://keysluomo.github.io/2020/06/14/Spark-Error/"/>
    <id>https://keysluomo.github.io/2020/06/14/Spark-Error/</id>
    <published>2020-06-14T03:45:08.000Z</published>
    <updated>2020-06-14T03:48:29.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置historyserver时："><a href="#配置historyserver时：" class="headerlink" title="配置historyserver时："></a>配置historyserver时：</h1><p><img src="https://uploadfiles.nowcoder.com/images/20191016/9094293_1571227263283_97221A1B1C45BED99055FB1996A900CE" alt="图片说明" title="图片标题"> </p><p>因为端口被占用了</p><h1 id="SparkStreaming-updateStateByKeyde-使用时-–checkpoint报错"><a href="#SparkStreaming-updateStateByKeyde-使用时-–checkpoint报错" class="headerlink" title="SparkStreaming updateStateByKeyde 使用时 –checkpoint报错"></a>SparkStreaming updateStateByKeyde 使用时 –checkpoint报错</h1><p><img src="https://uploadfiles.nowcoder.com/images/20191016/9094293_1571227382925_460CCA764930F915D29C8DC785013F26" alt="图片说明" title="图片标题"> </p><p>原因在使用的时候，并没有设置checkPoint 检测点<br>检测点的目的就是为了保存上一次的结果数据。如果没有检测点的话，那么将无法保存上一次结果<br>如果要保证中间数据不丢失的话，可以借助其它的工具，如hdfs<br>ssc.checkpoint(“hdfs://kd0301:9000/spark_checkpoint/”)</p>]]></content>
    
    <summary type="html">
    
      预览描述
    
    </summary>
    
      <category term="Spark" scheme="https://keysluomo.github.io/categories/Spark/"/>
    
    
      <category term="Error" scheme="https://keysluomo.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>Spark压缩文件性能分析</title>
    <link href="https://keysluomo.github.io/2020/06/14/Spark%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://keysluomo.github.io/2020/06/14/Spark压缩文件性能分析/</id>
    <published>2020-06-14T02:52:53.000Z</published>
    <updated>2020-06-14T05:03:14.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark压缩文件性能分析"><a href="#Spark压缩文件性能分析" class="headerlink" title="Spark压缩文件性能分析"></a>Spark压缩文件性能分析</h1><p>HDFS上分布式文件存储，成为大数据平台首选存储平台。而Spark往往以HDFS文件为输入，为保持兼容性，Spark支持多种格式文件读取，大数据场景下，性能瓶颈往往是IO，而不是CPU算力，所以对文件的压缩处理成为了很必要的手段。Spark为提供兼容性，同时支持多种压缩包直接读取，方便于用户使用，不用提前对压缩格式处理，但各种压缩格式各有优缺点，若不注意将导致Spark的能力无法发挥出来。故对Spark计算压缩文件做一个分析。</p><h1 id="支持的压缩格式"><a href="#支持的压缩格式" class="headerlink" title="支持的压缩格式"></a>支持的压缩格式</h1><p>首先来看一下Spark读取HDFS文件常用的压缩格式：<br><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106237246_09ACB263F52577BA2C36F0D60E304A75" alt="图片说明" title="图片标题"></p><h1 id="执行对比分析"><a href="#执行对比分析" class="headerlink" title="执行对比分析"></a>执行对比分析</h1><p>实验数据：同一个文件包，json格式文件数据<br>处理逻辑：增加列，然后发送到kafka中。<br>DAG逻辑划分：两个job（read动作一个job，foreach动作一个job），每个job下面各一个stage，每个stage下面task若干<br>程序执行参数：–master yarn –deploy-mode client –executor-cores 4 –executor-memory 4G –num-executors 4</p><h2 id="非压缩文件"><a href="#非压缩文件" class="headerlink" title="非压缩文件"></a>非压缩文件</h2><p>文件大小：33.7GB<br>运行时间：9min</p><h3 id="read阶段："><a href="#read阶段：" class="headerlink" title="read阶段："></a>read阶段：</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106293920_47AEB6D162BF532944DBDAB53E3D2EAB" alt="图片说明" title="图片标题"><br>可以看到所有节点都在读取，分布式读取，速度很快。<br><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106336406_317ADCB2DB2F35A583847F38535B7718" alt="图片说明" title="图片标题"></p><p>Stage里面共计分成了252个task，每个读取128MB数据。</p><h3 id="foreach阶段"><a href="#foreach阶段" class="headerlink" title="foreach阶段"></a>foreach阶段</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106365520_C40B30CD2EE17428DAC6E44372D32E64" alt="图片说明" title="图片标题"><br>依然并行全力计算<br><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106387308_25162C0F4A622B24CE97415EFFDE198A" alt="图片说明" title="图片标题"><br>每个执行节点上4个core都在并发运行。</p><h2 id="GZIP"><a href="#GZIP" class="headerlink" title="GZIP"></a>GZIP</h2><p>文件大小：10.6GB<br>运行时间：2.2h</p><p>###read阶段<br><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106404340_1FCD14A02942D89F2391B8A13BF3F1BF" alt="图片说明" title="图片标题"><br>只有单节点读取</p><p>同时该节点上也只有一个核心在运行<br><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106440480_1A2BEF1D5E0E50929495F9B550115FBA" alt="图片说明" title="图片标题"><br>foreach阶段</p><p>也是只有单节点、单core运行</p><h2 id="BZIP2"><a href="#BZIP2" class="headerlink" title="BZIP2"></a>BZIP2</h2><p>文件大小：7.7GB<br>运行时间：12min</p><h3 id="read阶段"><a href="#read阶段" class="headerlink" title="read阶段"></a>read阶段</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106466729_53072EE252372595149335F751CD1394" alt="图片说明" title="图片标题"><br>与非压缩一致，并行进行</p><h3 id="foreach阶段-1"><a href="#foreach阶段-1" class="headerlink" title="foreach阶段"></a>foreach阶段</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106481625_67EEB8DB9FD25C46B3486090E777B5D7" alt="图片说明" title="图片标题"><br>同样并发执行</p><h2 id="SNAPPY"><a href="#SNAPPY" class="headerlink" title="SNAPPY"></a>SNAPPY</h2><p>文件大小：16.5GB<br>运行时间：2.1h<br>这里直接采用的整文件压缩，所以文件不可分割。</p><h3 id="read阶段-1"><a href="#read阶段-1" class="headerlink" title="read阶段"></a>read阶段</h3><p><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106498372_E01A7A3A8C35CDBBFDFD4A58BA865021" alt="图片说明" title="图片标题"></p><p>单节点单核心读取，非并行。</p><h3 id="foreach阶段-2"><a href="#foreach阶段-2" class="headerlink" title="foreach阶段"></a>foreach阶段</h3><p>同上类似，单节点单核心运行<br>结果<br><img src="https://uploadfiles.nowcoder.com/images/20191003/9094293_1570106539620_64157194D9DFAFAA77BE73D5A02CE37B" alt="图片说明" title="图片标题"><br>gzip和snappy无法采用并行计算，也就是说在spark平台上，这两种格式只能采用串行单进程执行，于本文开头表格对应，无法分割（splittable）的压缩格式只能顺序一个进程读取，而读取后多文件又在一个executor上，其他executor无文件导致无法并行的foreach。<br>bz2和非压缩格式支持分割，也就是说可以并行读取以及计算。<br>不可分割的压缩格式文件不可并行读取，完全无法发挥spark的并行计算优势，并且若压缩包过大，对单节点的物理性能要求较高。<br>建议<br>snappy采用分块压缩方式使其可以并行读取计算。<br>gzip格式最好提前进行分割成小文件或者换格式，因多个文件可以并行读取。另一个办法是read文件后调用repartition操作强制将读取多数据重新均匀分配到不同的executor上，但这个操作会导致大量单节点性能占用，因此该格式建议不在spark上使用。<br>bz2表现相同于非压缩，但解压操作需要耗费时间。<br><strong>非压缩性能表现最佳，但会占用过大HDFS存储。</strong><br>spark输出压缩文件<br>实际生产环境需要spark输出文件到HDFS，并且为了节省空间会使用压缩格式，以下介绍几种常用的压缩格式<br>文本文件压缩</p><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><p>压缩率最高，压缩解压速度较慢，支持split。</p><pre><code>import org.apache.hadoop.io.compress.BZip2Codec//rdd.saveAsTextFile(&quot;codec/bzip2&quot;,classOf[BZip2Codec])</code></pre><h2 id="snappy"><a href="#snappy" class="headerlink" title="snappy"></a>snappy</h2><p>json文本压缩率 38.2%，压缩和解压缩时间短。</p><pre><code>import org.apache.hadoop.io.compress.SnappyCodec//rdd.saveAsTextFile(&quot;codec/snappy&quot;,classOf[SnappyCodec])</code></pre><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>压缩率高，压缩和解压速度较快，不支持split，如果不对文件大小进行控制，下次分析可能可能会造成效率低下的问题。<br>json文本压缩率23.5%，适合使用率低，长期存储的文件。</p><pre><code>import org.apache.hadoop.io.compress.GzipCodec//rdd.saveAsTextFile(&quot;codec/gzip&quot;,classOf[GzipCodec])</code></pre><h2 id="parquet文件压缩"><a href="#parquet文件压缩" class="headerlink" title="parquet文件压缩"></a>parquet文件压缩</h2><p>列式存储布局（比如 Parquet）可以加速查询，因为它只检查所有需要的列并对它们的值执行计算，因此只读取一个数据文件或表的小部分数据。Parquet 还支持灵活的压缩选项，因此可以显著减少磁盘上的存储。<br>如果您在 HDFS 上拥有基于文本的数据文件或表，而且正在使用 Spark SQL 对它们执行查询，那么强烈推荐将文本数据文件转换为 Parquet 数据文件，以实现性能和存储收益。当然，转换需要时间，但查询性能的提升在某些情况下可能达到 30 倍或更高，存储的节省可高达 75%！<br>转换 1 TB 数据将花费多长时间？<br>50 分钟，在一个 6 数据节点的 Spark v1.5.1 集群上可达到约 20 GB/分的吞吐量。使用的总内存约为 500GB。HDFS 上最终的 Parquet 文件的格式为：</p><pre><code>.../user/spark/data/parquet/catalog_page/part-r-00000-9ff58e65-0674-440a-883d-256370f33c66.gz.parquet/user/spark/data/parquet/catalog_page/part-r-00001-9ff58e65-0674-440a-883d-256370f33c66.gz.parquet...</code></pre><h3 id="存储节省"><a href="#存储节省" class="headerlink" title="存储节省"></a>存储节省</h3><p>以下 Linux 输出显示了 TEXT 和 PARQUET 在 HDFS 上的大小比较：</p><pre><code>% hadoop fs -du -h -s /user/spark/hadoopds1000g897.9 G /user/spark/hadoopds1000g% hadoop fs -du -h -s /user/spark/data/parquet231.4 G /user/spark/data/parquet</code></pre><p>1 TB 数据的存储节省了将近 75%！<br>parquet为文件提供了列式存储，查询时只会取出需要的字段和分区，对IO性能的提升非常大，同时占用空间较小，即使是parquet的uncompressed存储方式也比普通的文本要小的多。<br>spark中通过对parquet文件进行存储，spark2.0后默认使用snappy压缩，1.6.3及以前版本默认使用的gzip压缩方式。</p><p>dataset.write().parquet(“path”);</p><p>可以通过<br>spark.sql.parquet.compression.codec</p><p>参数或是在代码中进行修改配置压缩方式。<br>sparkConf.set(“spark.sql.parquet.compression.codec”,”gzip”)</p><p>parquet存储提供了<br>lzo gzip snappy uncompressed</p><p>参考文章<br><a href="https://zturn.cc/?p=24" target="_blank" rel="noopener">https://zturn.cc/?p=24</a><br><a href="https://blog.csdn.net/bajinsheng/article/details/100031359" target="_blank" rel="noopener">https://blog.csdn.net/bajinsheng/article/details/100031359</a><br><a href="https://www.ibm.com/developerworks/cn/analytics/blog/ba-parquet-for-spark-sql/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/analytics/blog/ba-parquet-for-spark-sql/index.html</a></p>]]></content>
    
    <summary type="html">
    
      HDFS上分布式文件存储，成为大数据平台首选存储平台。而Spark往往以HDFS文件为输入，为保持兼容性，Spark支持多种格式文件读取，大数据场景下，性能瓶颈往往是IO，而不是CPU算力，所以对文件的压缩处理成为了很必要的手段。Spark为提供兼容性，同时支持多种压缩包直接读取，方便于用户使用，不用提前对压缩格式处理，但各种压缩格式各有优缺点，若不注意将导致Spark的能力无法发挥出来。故对Spark计算压缩文件做一个分析。
    
    </summary>
    
      <category term="Spark" scheme="https://keysluomo.github.io/categories/Spark/"/>
    
    
      <category term="性能调优" scheme="https://keysluomo.github.io/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
</feed>
